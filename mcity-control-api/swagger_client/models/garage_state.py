# coding: utf-8

"""
    Mcity Control API

    Mcity implementation of OCTANE RESTful/Websocket API designed for autonomous and connected vehicle test facilities/cities.  # noqa: E501

    OpenAPI spec version: 0.0.10
    Contact: mcity-engineering@umich.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class GarageState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'updated': 'datetime',
        'open': 'bool',
        'activated': 'bool'
    }

    attribute_map = {
        'updated': 'updated',
        'open': 'open',
        'activated': 'activated'
    }

    def __init__(self, updated=None, open=None, activated=None):  # noqa: E501
        """GarageState - a model defined in Swagger"""  # noqa: E501
        self._updated = None
        self._open = None
        self._activated = None
        self.discriminator = None
        if updated is not None:
            self.updated = updated
        if open is not None:
            self.open = open
        if activated is not None:
            self.activated = activated

    @property
    def updated(self):
        """Gets the updated of this GarageState.  # noqa: E501

        The last time the status of this garage was updated  # noqa: E501

        :return: The updated of this GarageState.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this GarageState.

        The last time the status of this garage was updated  # noqa: E501

        :param updated: The updated of this GarageState.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def open(self):
        """Gets the open of this GarageState.  # noqa: E501

        Boolean value representing if the door is open  # noqa: E501

        :return: The open of this GarageState.  # noqa: E501
        :rtype: bool
        """
        return self._open

    @open.setter
    def open(self, open):
        """Sets the open of this GarageState.

        Boolean value representing if the door is open  # noqa: E501

        :param open: The open of this GarageState.  # noqa: E501
        :type: bool
        """

        self._open = open

    @property
    def activated(self):
        """Gets the activated of this GarageState.  # noqa: E501

        Boolean value representing if the door in motion  # noqa: E501

        :return: The activated of this GarageState.  # noqa: E501
        :rtype: bool
        """
        return self._activated

    @activated.setter
    def activated(self, activated):
        """Sets the activated of this GarageState.

        Boolean value representing if the door in motion  # noqa: E501

        :param activated: The activated of this GarageState.  # noqa: E501
        :type: bool
        """

        self._activated = activated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GarageState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GarageState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
