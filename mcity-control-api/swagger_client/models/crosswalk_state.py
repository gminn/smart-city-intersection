# coding: utf-8

"""
    Mcity Control API

    Mcity implementation of OCTANE RESTful/Websocket API designed for autonomous and connected vehicle test facilities/cities.  # noqa: E501

    OpenAPI spec version: 0.0.10
    Contact: mcity-engineering@umich.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CrosswalkState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'call_pedestrian': 'bool',
        'activated': 'bool',
        'phase': 'str',
        'countdown_time': 'int',
        'pedestrian_clear': 'bool',
        'walk_dont': 'bool',
        'walk': 'bool',
        'updated': 'datetime'
    }

    attribute_map = {
        'call_pedestrian': 'callPedestrian',
        'activated': 'activated',
        'phase': 'phase',
        'countdown_time': 'countdownTime',
        'pedestrian_clear': 'pedestrianClear',
        'walk_dont': 'walkDont',
        'walk': 'walk',
        'updated': 'updated'
    }

    def __init__(self, call_pedestrian=None, activated=None, phase=None, countdown_time=None, pedestrian_clear=None, walk_dont=None, walk=None, updated=None):  # noqa: E501
        """CrosswalkState - a model defined in Swagger"""  # noqa: E501
        self._call_pedestrian = None
        self._activated = None
        self._phase = None
        self._countdown_time = None
        self._pedestrian_clear = None
        self._walk_dont = None
        self._walk = None
        self._updated = None
        self.discriminator = None
        if call_pedestrian is not None:
            self.call_pedestrian = call_pedestrian
        if activated is not None:
            self.activated = activated
        if phase is not None:
            self.phase = phase
        if countdown_time is not None:
            self.countdown_time = countdown_time
        if pedestrian_clear is not None:
            self.pedestrian_clear = pedestrian_clear
        if walk_dont is not None:
            self.walk_dont = walk_dont
        if walk is not None:
            self.walk = walk
        if updated is not None:
            self.updated = updated

    @property
    def call_pedestrian(self):
        """Gets the call_pedestrian of this CrosswalkState.  # noqa: E501

        Pedestrian call placed, but has not been serviced.  # noqa: E501

        :return: The call_pedestrian of this CrosswalkState.  # noqa: E501
        :rtype: bool
        """
        return self._call_pedestrian

    @call_pedestrian.setter
    def call_pedestrian(self, call_pedestrian):
        """Sets the call_pedestrian of this CrosswalkState.

        Pedestrian call placed, but has not been serviced.  # noqa: E501

        :param call_pedestrian: The call_pedestrian of this CrosswalkState.  # noqa: E501
        :type: bool
        """

        self._call_pedestrian = call_pedestrian

    @property
    def activated(self):
        """Gets the activated of this CrosswalkState.  # noqa: E501

        Is the crosswalk activated?  # noqa: E501

        :return: The activated of this CrosswalkState.  # noqa: E501
        :rtype: bool
        """
        return self._activated

    @activated.setter
    def activated(self, activated):
        """Sets the activated of this CrosswalkState.

        Is the crosswalk activated?  # noqa: E501

        :param activated: The activated of this CrosswalkState.  # noqa: E501
        :type: bool
        """

        self._activated = activated

    @property
    def phase(self):
        """Gets the phase of this CrosswalkState.  # noqa: E501

        The current phase of the crosswalk if instrumented  # noqa: E501

        :return: The phase of this CrosswalkState.  # noqa: E501
        :rtype: str
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this CrosswalkState.

        The current phase of the crosswalk if instrumented  # noqa: E501

        :param phase: The phase of this CrosswalkState.  # noqa: E501
        :type: str
        """
        allowed_values = ["walk-text", "do-not-walk-text", "steady-upraised-hand", "steady-walking-man", "flashing-upraised-hand"]  # noqa: E501
        if phase not in allowed_values:
            raise ValueError(
                "Invalid value for `phase` ({0}), must be one of {1}"  # noqa: E501
                .format(phase, allowed_values)
            )

        self._phase = phase

    @property
    def countdown_time(self):
        """Gets the countdown_time of this CrosswalkState.  # noqa: E501

        The time remaining in this crosswalk phase if instrumented.  # noqa: E501

        :return: The countdown_time of this CrosswalkState.  # noqa: E501
        :rtype: int
        """
        return self._countdown_time

    @countdown_time.setter
    def countdown_time(self, countdown_time):
        """Sets the countdown_time of this CrosswalkState.

        The time remaining in this crosswalk phase if instrumented.  # noqa: E501

        :param countdown_time: The countdown_time of this CrosswalkState.  # noqa: E501
        :type: int
        """

        self._countdown_time = countdown_time

    @property
    def pedestrian_clear(self):
        """Gets the pedestrian_clear of this CrosswalkState.  # noqa: E501

        Pedestrian clear is active  # noqa: E501

        :return: The pedestrian_clear of this CrosswalkState.  # noqa: E501
        :rtype: bool
        """
        return self._pedestrian_clear

    @pedestrian_clear.setter
    def pedestrian_clear(self, pedestrian_clear):
        """Sets the pedestrian_clear of this CrosswalkState.

        Pedestrian clear is active  # noqa: E501

        :param pedestrian_clear: The pedestrian_clear of this CrosswalkState.  # noqa: E501
        :type: bool
        """

        self._pedestrian_clear = pedestrian_clear

    @property
    def walk_dont(self):
        """Gets the walk_dont of this CrosswalkState.  # noqa: E501

        DONT WALK sign is active  # noqa: E501

        :return: The walk_dont of this CrosswalkState.  # noqa: E501
        :rtype: bool
        """
        return self._walk_dont

    @walk_dont.setter
    def walk_dont(self, walk_dont):
        """Sets the walk_dont of this CrosswalkState.

        DONT WALK sign is active  # noqa: E501

        :param walk_dont: The walk_dont of this CrosswalkState.  # noqa: E501
        :type: bool
        """

        self._walk_dont = walk_dont

    @property
    def walk(self):
        """Gets the walk of this CrosswalkState.  # noqa: E501

        WALK sign is active  # noqa: E501

        :return: The walk of this CrosswalkState.  # noqa: E501
        :rtype: bool
        """
        return self._walk

    @walk.setter
    def walk(self, walk):
        """Sets the walk of this CrosswalkState.

        WALK sign is active  # noqa: E501

        :param walk: The walk of this CrosswalkState.  # noqa: E501
        :type: bool
        """

        self._walk = walk

    @property
    def updated(self):
        """Gets the updated of this CrosswalkState.  # noqa: E501

        The last time the status of this crosswalk was updated  # noqa: E501

        :return: The updated of this CrosswalkState.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this CrosswalkState.

        The last time the status of this crosswalk was updated  # noqa: E501

        :param updated: The updated of this CrosswalkState.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CrosswalkState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CrosswalkState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
