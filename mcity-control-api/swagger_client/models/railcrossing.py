# coding: utf-8

"""
    Mcity Control API

    Mcity implementation of OCTANE RESTful/Websocket API designed for autonomous and connected vehicle test facilities/cities.  # noqa: E501

    OpenAPI spec version: 0.0.10
    Contact: mcity-engineering@umich.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Railcrossing(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'uri': 'str',
        'name': 'str',
        'url': 'str',
        'longitude': 'float',
        'latitude': 'float',
        'instrument': 'str',
        'audible': 'bool',
        'gate': 'bool',
        'beacon': 'str',
        'phases': 'list[str]',
        'state': 'RailcrossingState'
    }

    attribute_map = {
        'id': 'id',
        'uri': 'uri',
        'name': 'name',
        'url': 'url',
        'longitude': 'longitude',
        'latitude': 'latitude',
        'instrument': 'instrument',
        'audible': 'audible',
        'gate': 'gate',
        'beacon': 'beacon',
        'phases': 'phases',
        'state': 'state'
    }

    def __init__(self, id=None, uri=None, name=None, url=None, longitude=None, latitude=None, instrument=None, audible=None, gate=None, beacon=None, phases=None, state=None):  # noqa: E501
        """Railcrossing - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._uri = None
        self._name = None
        self._url = None
        self._longitude = None
        self._latitude = None
        self._instrument = None
        self._audible = None
        self._gate = None
        self._beacon = None
        self._phases = None
        self._state = None
        self.discriminator = None
        self.id = id
        if uri is not None:
            self.uri = uri
        if name is not None:
            self.name = name
        if url is not None:
            self.url = url
        if longitude is not None:
            self.longitude = longitude
        if latitude is not None:
            self.latitude = latitude
        if instrument is not None:
            self.instrument = instrument
        if audible is not None:
            self.audible = audible
        if gate is not None:
            self.gate = gate
        if beacon is not None:
            self.beacon = beacon
        if phases is not None:
            self.phases = phases
        if state is not None:
            self.state = state

    @property
    def id(self):
        """Gets the id of this Railcrossing.  # noqa: E501

        An ID number identifying this crosswalk  # noqa: E501

        :return: The id of this Railcrossing.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Railcrossing.

        An ID number identifying this crosswalk  # noqa: E501

        :param id: The id of this Railcrossing.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def uri(self):
        """Gets the uri of this Railcrossing.  # noqa: E501

        The URI which can be used to access this rail crossing directly  # noqa: E501

        :return: The uri of this Railcrossing.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Railcrossing.

        The URI which can be used to access this rail crossing directly  # noqa: E501

        :param uri: The uri of this Railcrossing.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def name(self):
        """Gets the name of this Railcrossing.  # noqa: E501

        A text based description of the rail crossing  # noqa: E501

        :return: The name of this Railcrossing.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Railcrossing.

        A text based description of the rail crossing  # noqa: E501

        :param name: The name of this Railcrossing.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this Railcrossing.  # noqa: E501

        A url with more information about this specific rail crossing  # noqa: E501

        :return: The url of this Railcrossing.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Railcrossing.

        A url with more information about this specific rail crossing  # noqa: E501

        :param url: The url of this Railcrossing.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def longitude(self):
        """Gets the longitude of this Railcrossing.  # noqa: E501

        The longitude of the centroid of the rail crossing  # noqa: E501

        :return: The longitude of this Railcrossing.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Railcrossing.

        The longitude of the centroid of the rail crossing  # noqa: E501

        :param longitude: The longitude of this Railcrossing.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def latitude(self):
        """Gets the latitude of this Railcrossing.  # noqa: E501

        The latitude of the centroid of the rail crossing  # noqa: E501

        :return: The latitude of this Railcrossing.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Railcrossing.

        The latitude of the centroid of the rail crossing  # noqa: E501

        :param latitude: The latitude of this Railcrossing.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def instrument(self):
        """Gets the instrument of this Railcrossing.  # noqa: E501

        The signal type of rail crossing  # noqa: E501

        :return: The instrument of this Railcrossing.  # noqa: E501
        :rtype: str
        """
        return self._instrument

    @instrument.setter
    def instrument(self, instrument):
        """Sets the instrument of this Railcrossing.

        The signal type of rail crossing  # noqa: E501

        :param instrument: The instrument of this Railcrossing.  # noqa: E501
        :type: str
        """
        allowed_values = ["crossbuck"]  # noqa: E501
        if instrument not in allowed_values:
            raise ValueError(
                "Invalid value for `instrument` ({0}), must be one of {1}"  # noqa: E501
                .format(instrument, allowed_values)
            )

        self._instrument = instrument

    @property
    def audible(self):
        """Gets the audible of this Railcrossing.  # noqa: E501

        Is the rail crossing equipped with an audible warning  # noqa: E501

        :return: The audible of this Railcrossing.  # noqa: E501
        :rtype: bool
        """
        return self._audible

    @audible.setter
    def audible(self, audible):
        """Sets the audible of this Railcrossing.

        Is the rail crossing equipped with an audible warning  # noqa: E501

        :param audible: The audible of this Railcrossing.  # noqa: E501
        :type: bool
        """

        self._audible = audible

    @property
    def gate(self):
        """Gets the gate of this Railcrossing.  # noqa: E501

        Is the rail crossing equipped with a gate  # noqa: E501

        :return: The gate of this Railcrossing.  # noqa: E501
        :rtype: bool
        """
        return self._gate

    @gate.setter
    def gate(self, gate):
        """Sets the gate of this Railcrossing.

        Is the rail crossing equipped with a gate  # noqa: E501

        :param gate: The gate of this Railcrossing.  # noqa: E501
        :type: bool
        """

        self._gate = gate

    @property
    def beacon(self):
        """Gets the beacon of this Railcrossing.  # noqa: E501

        The beacon type used for this rail crossing  # noqa: E501

        :return: The beacon of this Railcrossing.  # noqa: E501
        :rtype: str
        """
        return self._beacon

    @beacon.setter
    def beacon(self, beacon):
        """Sets the beacon of this Railcrossing.

        The beacon type used for this rail crossing  # noqa: E501

        :param beacon: The beacon of this Railcrossing.  # noqa: E501
        :type: str
        """
        allowed_values = ["wig-wag", "flashing"]  # noqa: E501
        if beacon not in allowed_values:
            raise ValueError(
                "Invalid value for `beacon` ({0}), must be one of {1}"  # noqa: E501
                .format(beacon, allowed_values)
            )

        self._beacon = beacon

    @property
    def phases(self):
        """Gets the phases of this Railcrossing.  # noqa: E501

        A list of supported phases  # noqa: E501

        :return: The phases of this Railcrossing.  # noqa: E501
        :rtype: list[str]
        """
        return self._phases

    @phases.setter
    def phases(self, phases):
        """Sets the phases of this Railcrossing.

        A list of supported phases  # noqa: E501

        :param phases: The phases of this Railcrossing.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["presignal", "closing", "closed", "opening", "postsignal", "open"]  # noqa: E501
        if not set(phases).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `phases` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(phases) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._phases = phases

    @property
    def state(self):
        """Gets the state of this Railcrossing.  # noqa: E501


        :return: The state of this Railcrossing.  # noqa: E501
        :rtype: RailcrossingState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Railcrossing.


        :param state: The state of this Railcrossing.  # noqa: E501
        :type: RailcrossingState
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Railcrossing, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Railcrossing):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
