# coding: utf-8

"""
    Mcity Control API

    Mcity implementation of OCTANE RESTful/Websocket API designed for autonomous and connected vehicle test facilities/cities.  # noqa: E501

    OpenAPI spec version: 0.0.10
    Contact: mcity-engineering@umich.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class FacilityContact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'maintenance': 'str',
        'reservations': 'str',
        'manager': 'str',
        'technical': 'str',
        'emergency': 'str'
    }

    attribute_map = {
        'maintenance': 'maintenance',
        'reservations': 'reservations',
        'manager': 'manager',
        'technical': 'technical',
        'emergency': 'emergency'
    }

    def __init__(self, maintenance=None, reservations=None, manager=None, technical=None, emergency=None):  # noqa: E501
        """FacilityContact - a model defined in Swagger"""  # noqa: E501
        self._maintenance = None
        self._reservations = None
        self._manager = None
        self._technical = None
        self._emergency = None
        self.discriminator = None
        if maintenance is not None:
            self.maintenance = maintenance
        if reservations is not None:
            self.reservations = reservations
        if manager is not None:
            self.manager = manager
        if technical is not None:
            self.technical = technical
        if emergency is not None:
            self.emergency = emergency

    @property
    def maintenance(self):
        """Gets the maintenance of this FacilityContact.  # noqa: E501

        Facility Maintenance Contact  # noqa: E501

        :return: The maintenance of this FacilityContact.  # noqa: E501
        :rtype: str
        """
        return self._maintenance

    @maintenance.setter
    def maintenance(self, maintenance):
        """Sets the maintenance of this FacilityContact.

        Facility Maintenance Contact  # noqa: E501

        :param maintenance: The maintenance of this FacilityContact.  # noqa: E501
        :type: str
        """

        self._maintenance = maintenance

    @property
    def reservations(self):
        """Gets the reservations of this FacilityContact.  # noqa: E501

        Facility Reservation Contact  # noqa: E501

        :return: The reservations of this FacilityContact.  # noqa: E501
        :rtype: str
        """
        return self._reservations

    @reservations.setter
    def reservations(self, reservations):
        """Sets the reservations of this FacilityContact.

        Facility Reservation Contact  # noqa: E501

        :param reservations: The reservations of this FacilityContact.  # noqa: E501
        :type: str
        """

        self._reservations = reservations

    @property
    def manager(self):
        """Gets the manager of this FacilityContact.  # noqa: E501

        Facility Manager Contact  # noqa: E501

        :return: The manager of this FacilityContact.  # noqa: E501
        :rtype: str
        """
        return self._manager

    @manager.setter
    def manager(self, manager):
        """Sets the manager of this FacilityContact.

        Facility Manager Contact  # noqa: E501

        :param manager: The manager of this FacilityContact.  # noqa: E501
        :type: str
        """

        self._manager = manager

    @property
    def technical(self):
        """Gets the technical of this FacilityContact.  # noqa: E501

        Facility Technical Contact  # noqa: E501

        :return: The technical of this FacilityContact.  # noqa: E501
        :rtype: str
        """
        return self._technical

    @technical.setter
    def technical(self, technical):
        """Sets the technical of this FacilityContact.

        Facility Technical Contact  # noqa: E501

        :param technical: The technical of this FacilityContact.  # noqa: E501
        :type: str
        """

        self._technical = technical

    @property
    def emergency(self):
        """Gets the emergency of this FacilityContact.  # noqa: E501

        Facility Emergency Contact  # noqa: E501

        :return: The emergency of this FacilityContact.  # noqa: E501
        :rtype: str
        """
        return self._emergency

    @emergency.setter
    def emergency(self, emergency):
        """Sets the emergency of this FacilityContact.

        Facility Emergency Contact  # noqa: E501

        :param emergency: The emergency of this FacilityContact.  # noqa: E501
        :type: str
        """

        self._emergency = emergency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FacilityContact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FacilityContact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
