# coding: utf-8

"""
    Mcity Control API

    Mcity implementation of OCTANE RESTful/Websocket API designed for autonomous and connected vehicle test facilities/cities.  # noqa: E501

    OpenAPI spec version: 0.0.10
    Contact: mcity-engineering@umich.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class V2XPSM(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'message_set': 'str',
        'updated': 'datetime',
        'longitude': 'float',
        'latitude': 'float',
        'elevation': 'float',
        'speed': 'float',
        'heading': 'float',
        'type': 'str',
        'size': 'str'
    }

    attribute_map = {
        'id': 'id',
        'message_set': 'messageSet',
        'updated': 'updated',
        'longitude': 'longitude',
        'latitude': 'latitude',
        'elevation': 'elevation',
        'speed': 'speed',
        'heading': 'heading',
        'type': 'type',
        'size': 'size'
    }

    def __init__(self, id=None, message_set=None, updated=None, longitude=None, latitude=None, elevation=None, speed=None, heading=None, type=None, size=None):  # noqa: E501
        """V2XPSM - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._message_set = None
        self._updated = None
        self._longitude = None
        self._latitude = None
        self._elevation = None
        self._speed = None
        self._heading = None
        self._type = None
        self._size = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if message_set is not None:
            self.message_set = message_set
        if updated is not None:
            self.updated = updated
        if longitude is not None:
            self.longitude = longitude
        if latitude is not None:
            self.latitude = latitude
        if elevation is not None:
            self.elevation = elevation
        if speed is not None:
            self.speed = speed
        if heading is not None:
            self.heading = heading
        if type is not None:
            self.type = type
        if size is not None:
            self.size = size

    @property
    def id(self):
        """Gets the id of this V2XPSM.  # noqa: E501

        Static identifier if available, else temporary identifier provided by Personal Safety Device.  # noqa: E501

        :return: The id of this V2XPSM.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V2XPSM.

        Static identifier if available, else temporary identifier provided by Personal Safety Device.  # noqa: E501

        :param id: The id of this V2XPSM.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def message_set(self):
        """Gets the message_set of this V2XPSM.  # noqa: E501

        The original format this message was broadcast in before decoding.  # noqa: E501

        :return: The message_set of this V2XPSM.  # noqa: E501
        :rtype: str
        """
        return self._message_set

    @message_set.setter
    def message_set(self, message_set):
        """Sets the message_set of this V2XPSM.

        The original format this message was broadcast in before decoding.  # noqa: E501

        :param message_set: The message_set of this V2XPSM.  # noqa: E501
        :type: str
        """
        allowed_values = ["J2735_200612", "J2735_200911", "J2735_201509", "J2735_201601", "J2735_201603"]  # noqa: E501
        if message_set not in allowed_values:
            raise ValueError(
                "Invalid value for `message_set` ({0}), must be one of {1}"  # noqa: E501
                .format(message_set, allowed_values)
            )

        self._message_set = message_set

    @property
    def updated(self):
        """Gets the updated of this V2XPSM.  # noqa: E501

        The date time this message was sent via OCTANE.  # noqa: E501

        :return: The updated of this V2XPSM.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this V2XPSM.

        The date time this message was sent via OCTANE.  # noqa: E501

        :param updated: The updated of this V2XPSM.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def longitude(self):
        """Gets the longitude of this V2XPSM.  # noqa: E501

        Longitude of the transmitting V2X device.  # noqa: E501

        :return: The longitude of this V2XPSM.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this V2XPSM.

        Longitude of the transmitting V2X device.  # noqa: E501

        :param longitude: The longitude of this V2XPSM.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def latitude(self):
        """Gets the latitude of this V2XPSM.  # noqa: E501

        Latitude of the transmitting V2X device.  # noqa: E501

        :return: The latitude of this V2XPSM.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this V2XPSM.

        Latitude of the transmitting V2X device.  # noqa: E501

        :param latitude: The latitude of this V2XPSM.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def elevation(self):
        """Gets the elevation of this V2XPSM.  # noqa: E501

        Elevation of transmitting V2X device. Units in meters  # noqa: E501

        :return: The elevation of this V2XPSM.  # noqa: E501
        :rtype: float
        """
        return self._elevation

    @elevation.setter
    def elevation(self, elevation):
        """Sets the elevation of this V2XPSM.

        Elevation of transmitting V2X device. Units in meters  # noqa: E501

        :param elevation: The elevation of this V2XPSM.  # noqa: E501
        :type: float
        """

        self._elevation = elevation

    @property
    def speed(self):
        """Gets the speed of this V2XPSM.  # noqa: E501

        Reported Velocity of V2X Device. Units in m/s  # noqa: E501

        :return: The speed of this V2XPSM.  # noqa: E501
        :rtype: float
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this V2XPSM.

        Reported Velocity of V2X Device. Units in m/s  # noqa: E501

        :param speed: The speed of this V2XPSM.  # noqa: E501
        :type: float
        """

        self._speed = speed

    @property
    def heading(self):
        """Gets the heading of this V2XPSM.  # noqa: E501

        0 to 359.9875 degrees.  # noqa: E501

        :return: The heading of this V2XPSM.  # noqa: E501
        :rtype: float
        """
        return self._heading

    @heading.setter
    def heading(self, heading):
        """Sets the heading of this V2XPSM.

        0 to 359.9875 degrees.  # noqa: E501

        :param heading: The heading of this V2XPSM.  # noqa: E501
        :type: float
        """

        self._heading = heading

    @property
    def type(self):
        """Gets the type of this V2XPSM.  # noqa: E501

        The personal safety message user type  # noqa: E501

        :return: The type of this V2XPSM.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V2XPSM.

        The personal safety message user type  # noqa: E501

        :param type: The type of this V2XPSM.  # noqa: E501
        :type: str
        """
        allowed_values = ["pedestrian", "bicyclist", "worker", "animal", "godzilla"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def size(self):
        """Gets the size of this V2XPSM.  # noqa: E501

        Estimated size of the PSM. Large is > 1.5m  # noqa: E501

        :return: The size of this V2XPSM.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this V2XPSM.

        Estimated size of the PSM. Large is > 1.5m  # noqa: E501

        :param size: The size of this V2XPSM.  # noqa: E501
        :type: str
        """
        allowed_values = ["unknown", "small", "large"]  # noqa: E501
        if size not in allowed_values:
            raise ValueError(
                "Invalid value for `size` ({0}), must be one of {1}"  # noqa: E501
                .format(size, allowed_values)
            )

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2XPSM, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2XPSM):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
