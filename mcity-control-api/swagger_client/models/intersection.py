# coding: utf-8

"""
    Mcity Control API

    Mcity implementation of OCTANE RESTful/Websocket API designed for autonomous and connected vehicle test facilities/cities.  # noqa: E501

    OpenAPI spec version: 0.0.10
    Contact: mcity-engineering@umich.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Intersection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'uri': 'str',
        'name': 'str',
        'url': 'str',
        'longitude': 'float',
        'latitude': 'float',
        'instrument': 'str',
        'phases': 'list[Phase]',
        'stages': 'list[IntersectionStages]',
        'style': 'str',
        'street_main': 'str',
        'street_cross': 'str',
        'v2x_intersection_id': 'str',
        'state': 'IntersectionState'
    }

    attribute_map = {
        'id': 'id',
        'uri': 'uri',
        'name': 'name',
        'url': 'url',
        'longitude': 'longitude',
        'latitude': 'latitude',
        'instrument': 'instrument',
        'phases': 'phases',
        'stages': 'stages',
        'style': 'style',
        'street_main': 'streetMain',
        'street_cross': 'streetCross',
        'v2x_intersection_id': 'v2xIntersectionId',
        'state': 'state'
    }

    def __init__(self, id=None, uri=None, name=None, url=None, longitude=None, latitude=None, instrument=None, phases=None, stages=None, style=None, street_main=None, street_cross=None, v2x_intersection_id=None, state=None):  # noqa: E501
        """Intersection - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._uri = None
        self._name = None
        self._url = None
        self._longitude = None
        self._latitude = None
        self._instrument = None
        self._phases = None
        self._stages = None
        self._style = None
        self._street_main = None
        self._street_cross = None
        self._v2x_intersection_id = None
        self._state = None
        self.discriminator = None
        self.id = id
        if uri is not None:
            self.uri = uri
        if name is not None:
            self.name = name
        if url is not None:
            self.url = url
        if longitude is not None:
            self.longitude = longitude
        if latitude is not None:
            self.latitude = latitude
        if instrument is not None:
            self.instrument = instrument
        if phases is not None:
            self.phases = phases
        if stages is not None:
            self.stages = stages
        if style is not None:
            self.style = style
        if street_main is not None:
            self.street_main = street_main
        if street_cross is not None:
            self.street_cross = street_cross
        if v2x_intersection_id is not None:
            self.v2x_intersection_id = v2x_intersection_id
        if state is not None:
            self.state = state

    @property
    def id(self):
        """Gets the id of this Intersection.  # noqa: E501

        An ID number identifying this intersection  # noqa: E501

        :return: The id of this Intersection.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Intersection.

        An ID number identifying this intersection  # noqa: E501

        :param id: The id of this Intersection.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def uri(self):
        """Gets the uri of this Intersection.  # noqa: E501

        The URI which can be used to access this signal set directly  # noqa: E501

        :return: The uri of this Intersection.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Intersection.

        The URI which can be used to access this signal set directly  # noqa: E501

        :param uri: The uri of this Intersection.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def name(self):
        """Gets the name of this Intersection.  # noqa: E501

        A text based description of the signal  # noqa: E501

        :return: The name of this Intersection.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Intersection.

        A text based description of the signal  # noqa: E501

        :param name: The name of this Intersection.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this Intersection.  # noqa: E501

        A url with more information about this specific intersection  # noqa: E501

        :return: The url of this Intersection.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Intersection.

        A url with more information about this specific intersection  # noqa: E501

        :param url: The url of this Intersection.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def longitude(self):
        """Gets the longitude of this Intersection.  # noqa: E501

        The longitude of the centroid of the signal set  # noqa: E501

        :return: The longitude of this Intersection.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Intersection.

        The longitude of the centroid of the signal set  # noqa: E501

        :param longitude: The longitude of this Intersection.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def latitude(self):
        """Gets the latitude of this Intersection.  # noqa: E501

        The latitude of the centroid of the signal set  # noqa: E501

        :return: The latitude of this Intersection.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Intersection.

        The latitude of the centroid of the signal set  # noqa: E501

        :param latitude: The latitude of this Intersection.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def instrument(self):
        """Gets the instrument of this Intersection.  # noqa: E501

        The intersection instrument type  # noqa: E501

        :return: The instrument of this Intersection.  # noqa: E501
        :rtype: str
        """
        return self._instrument

    @instrument.setter
    def instrument(self, instrument):
        """Sets the instrument of this Intersection.

        The intersection instrument type  # noqa: E501

        :param instrument: The instrument of this Intersection.  # noqa: E501
        :type: str
        """
        allowed_values = ["signal", "stop", "yield", "ramp"]  # noqa: E501
        if instrument not in allowed_values:
            raise ValueError(
                "Invalid value for `instrument` ({0}), must be one of {1}"  # noqa: E501
                .format(instrument, allowed_values)
            )

        self._instrument = instrument

    @property
    def phases(self):
        """Gets the phases of this Intersection.  # noqa: E501

        A listing of configured non-conflicting sets of phases that can be used for control.  # noqa: E501

        :return: The phases of this Intersection.  # noqa: E501
        :rtype: list[Phase]
        """
        return self._phases

    @phases.setter
    def phases(self, phases):
        """Sets the phases of this Intersection.

        A listing of configured non-conflicting sets of phases that can be used for control.  # noqa: E501

        :param phases: The phases of this Intersection.  # noqa: E501
        :type: list[Phase]
        """

        self._phases = phases

    @property
    def stages(self):
        """Gets the stages of this Intersection.  # noqa: E501

        A listing of configured non-conflicting sets of phases that can be used for control.  # noqa: E501

        :return: The stages of this Intersection.  # noqa: E501
        :rtype: list[IntersectionStages]
        """
        return self._stages

    @stages.setter
    def stages(self, stages):
        """Sets the stages of this Intersection.

        A listing of configured non-conflicting sets of phases that can be used for control.  # noqa: E501

        :param stages: The stages of this Intersection.  # noqa: E501
        :type: list[IntersectionStages]
        """

        self._stages = stages

    @property
    def style(self):
        """Gets the style of this Intersection.  # noqa: E501

        Describes the number of road segments entering the intersection  # noqa: E501

        :return: The style of this Intersection.  # noqa: E501
        :rtype: str
        """
        return self._style

    @style.setter
    def style(self, style):
        """Sets the style of this Intersection.

        Describes the number of road segments entering the intersection  # noqa: E501

        :param style: The style of this Intersection.  # noqa: E501
        :type: str
        """
        allowed_values = ["straight", "three-way", "four-way", "five-way"]  # noqa: E501
        if style not in allowed_values:
            raise ValueError(
                "Invalid value for `style` ({0}), must be one of {1}"  # noqa: E501
                .format(style, allowed_values)
            )

        self._style = style

    @property
    def street_main(self):
        """Gets the street_main of this Intersection.  # noqa: E501

        The name of the street which is considered to be the main street by the traffic controller  # noqa: E501

        :return: The street_main of this Intersection.  # noqa: E501
        :rtype: str
        """
        return self._street_main

    @street_main.setter
    def street_main(self, street_main):
        """Sets the street_main of this Intersection.

        The name of the street which is considered to be the main street by the traffic controller  # noqa: E501

        :param street_main: The street_main of this Intersection.  # noqa: E501
        :type: str
        """

        self._street_main = street_main

    @property
    def street_cross(self):
        """Gets the street_cross of this Intersection.  # noqa: E501

        The name of the second street which is considered the cross street by the traffic controller  # noqa: E501

        :return: The street_cross of this Intersection.  # noqa: E501
        :rtype: str
        """
        return self._street_cross

    @street_cross.setter
    def street_cross(self, street_cross):
        """Sets the street_cross of this Intersection.

        The name of the second street which is considered the cross street by the traffic controller  # noqa: E501

        :param street_cross: The street_cross of this Intersection.  # noqa: E501
        :type: str
        """

        self._street_cross = street_cross

    @property
    def v2x_intersection_id(self):
        """Gets the v2x_intersection_id of this Intersection.  # noqa: E501

        Identifier for this intersection used in V2X messages such as MAP and SPaT.  # noqa: E501

        :return: The v2x_intersection_id of this Intersection.  # noqa: E501
        :rtype: str
        """
        return self._v2x_intersection_id

    @v2x_intersection_id.setter
    def v2x_intersection_id(self, v2x_intersection_id):
        """Sets the v2x_intersection_id of this Intersection.

        Identifier for this intersection used in V2X messages such as MAP and SPaT.  # noqa: E501

        :param v2x_intersection_id: The v2x_intersection_id of this Intersection.  # noqa: E501
        :type: str
        """

        self._v2x_intersection_id = v2x_intersection_id

    @property
    def state(self):
        """Gets the state of this Intersection.  # noqa: E501


        :return: The state of this Intersection.  # noqa: E501
        :rtype: IntersectionState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Intersection.


        :param state: The state of this Intersection.  # noqa: E501
        :type: IntersectionState
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Intersection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Intersection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
