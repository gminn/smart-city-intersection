# coding: utf-8

"""
    Mcity Control API

    Mcity implementation of OCTANE RESTful/Websocket API designed for autonomous and connected vehicle test facilities/cities.  # noqa: E501

    OpenAPI spec version: 0.0.10
    Contact: mcity-engineering@umich.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class V2XSPaT(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'message_set': 'str',
        'updated': 'datetime',
        'time_system': 'str',
        'green': 'str',
        'yellow': 'str',
        'red': 'str',
        'pedestrian_clear': 'str',
        'walk_dont': 'str',
        'walk': 'str',
        'flash': 'str',
        'phases': 'list[V2XSPaTPhases]'
    }

    attribute_map = {
        'id': 'id',
        'message_set': 'messageSet',
        'updated': 'updated',
        'time_system': 'timeSystem',
        'green': 'green',
        'yellow': 'yellow',
        'red': 'red',
        'pedestrian_clear': 'pedestrianClear',
        'walk_dont': 'walkDont',
        'walk': 'walk',
        'flash': 'flash',
        'phases': 'phases'
    }

    def __init__(self, id=None, message_set=None, updated=None, time_system=None, green=None, yellow=None, red=None, pedestrian_clear=None, walk_dont=None, walk=None, flash=None, phases=None):  # noqa: E501
        """V2XSPaT - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._message_set = None
        self._updated = None
        self._time_system = None
        self._green = None
        self._yellow = None
        self._red = None
        self._pedestrian_clear = None
        self._walk_dont = None
        self._walk = None
        self._flash = None
        self._phases = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if message_set is not None:
            self.message_set = message_set
        if updated is not None:
            self.updated = updated
        if time_system is not None:
            self.time_system = time_system
        if green is not None:
            self.green = green
        if yellow is not None:
            self.yellow = yellow
        if red is not None:
            self.red = red
        if pedestrian_clear is not None:
            self.pedestrian_clear = pedestrian_clear
        if walk_dont is not None:
            self.walk_dont = walk_dont
        if walk is not None:
            self.walk = walk
        if flash is not None:
            self.flash = flash
        if phases is not None:
            self.phases = phases

    @property
    def id(self):
        """Gets the id of this V2XSPaT.  # noqa: E501

        Identifier given for the intersection this message is related to.  # noqa: E501

        :return: The id of this V2XSPaT.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V2XSPaT.

        Identifier given for the intersection this message is related to.  # noqa: E501

        :param id: The id of this V2XSPaT.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def message_set(self):
        """Gets the message_set of this V2XSPaT.  # noqa: E501

        The original format this message was broadcast in before decoding.  # noqa: E501

        :return: The message_set of this V2XSPaT.  # noqa: E501
        :rtype: str
        """
        return self._message_set

    @message_set.setter
    def message_set(self, message_set):
        """Sets the message_set of this V2XSPaT.

        The original format this message was broadcast in before decoding.  # noqa: E501

        :param message_set: The message_set of this V2XSPaT.  # noqa: E501
        :type: str
        """
        allowed_values = ["NTCIP", "J2735_200612", "J2735_200911", "J2735_201509", "J2735_201601", "J2735_201603"]  # noqa: E501
        if message_set not in allowed_values:
            raise ValueError(
                "Invalid value for `message_set` ({0}), must be one of {1}"  # noqa: E501
                .format(message_set, allowed_values)
            )

        self._message_set = message_set

    @property
    def updated(self):
        """Gets the updated of this V2XSPaT.  # noqa: E501

        The date time of this message was parsed.  # noqa: E501

        :return: The updated of this V2XSPaT.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this V2XSPaT.

        The date time of this message was parsed.  # noqa: E501

        :param updated: The updated of this V2XSPaT.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def time_system(self):
        """Gets the time_system of this V2XSPaT.  # noqa: E501

        System reported time represented as seconds.milliseconds  # noqa: E501

        :return: The time_system of this V2XSPaT.  # noqa: E501
        :rtype: str
        """
        return self._time_system

    @time_system.setter
    def time_system(self, time_system):
        """Sets the time_system of this V2XSPaT.

        System reported time represented as seconds.milliseconds  # noqa: E501

        :param time_system: The time_system of this V2XSPaT.  # noqa: E501
        :type: str
        """

        self._time_system = time_system

    @property
    def green(self):
        """Gets the green of this V2XSPaT.  # noqa: E501

        Phases which are Green. A bit string representing a true or false value for each of the 16 phases in descending order Ex. 0000000000100001 (Phase 1+6)  # noqa: E501

        :return: The green of this V2XSPaT.  # noqa: E501
        :rtype: str
        """
        return self._green

    @green.setter
    def green(self, green):
        """Sets the green of this V2XSPaT.

        Phases which are Green. A bit string representing a true or false value for each of the 16 phases in descending order Ex. 0000000000100001 (Phase 1+6)  # noqa: E501

        :param green: The green of this V2XSPaT.  # noqa: E501
        :type: str
        """

        self._green = green

    @property
    def yellow(self):
        """Gets the yellow of this V2XSPaT.  # noqa: E501

        Phases which are Yellow. A bit string representing a true or false value for each of the 16 phases in descending order Ex. 0000000000100001 (Phase 1+6)  # noqa: E501

        :return: The yellow of this V2XSPaT.  # noqa: E501
        :rtype: str
        """
        return self._yellow

    @yellow.setter
    def yellow(self, yellow):
        """Sets the yellow of this V2XSPaT.

        Phases which are Yellow. A bit string representing a true or false value for each of the 16 phases in descending order Ex. 0000000000100001 (Phase 1+6)  # noqa: E501

        :param yellow: The yellow of this V2XSPaT.  # noqa: E501
        :type: str
        """

        self._yellow = yellow

    @property
    def red(self):
        """Gets the red of this V2XSPaT.  # noqa: E501

        Phases which are Red. A bit string representing a true or false value for each of the 16 phases in descending order Ex. 0000000000100001 (Phase 1+6)  # noqa: E501

        :return: The red of this V2XSPaT.  # noqa: E501
        :rtype: str
        """
        return self._red

    @red.setter
    def red(self, red):
        """Sets the red of this V2XSPaT.

        Phases which are Red. A bit string representing a true or false value for each of the 16 phases in descending order Ex. 0000000000100001 (Phase 1+6)  # noqa: E501

        :param red: The red of this V2XSPaT.  # noqa: E501
        :type: str
        """

        self._red = red

    @property
    def pedestrian_clear(self):
        """Gets the pedestrian_clear of this V2XSPaT.  # noqa: E501

        Pedestrian clear state active/inactive by phase. A bit string representing a true or false value for each of the 16 phases in descending order Ex. 00100001 (Phase 1+6)  # noqa: E501

        :return: The pedestrian_clear of this V2XSPaT.  # noqa: E501
        :rtype: str
        """
        return self._pedestrian_clear

    @pedestrian_clear.setter
    def pedestrian_clear(self, pedestrian_clear):
        """Sets the pedestrian_clear of this V2XSPaT.

        Pedestrian clear state active/inactive by phase. A bit string representing a true or false value for each of the 16 phases in descending order Ex. 00100001 (Phase 1+6)  # noqa: E501

        :param pedestrian_clear: The pedestrian_clear of this V2XSPaT.  # noqa: E501
        :type: str
        """

        self._pedestrian_clear = pedestrian_clear

    @property
    def walk_dont(self):
        """Gets the walk_dont of this V2XSPaT.  # noqa: E501

        Don't walk activity by phase. A bit string representing a true or false value for each of the 16 phases in descending order Ex. 00100001 (Phase 1+6)  # noqa: E501

        :return: The walk_dont of this V2XSPaT.  # noqa: E501
        :rtype: str
        """
        return self._walk_dont

    @walk_dont.setter
    def walk_dont(self, walk_dont):
        """Sets the walk_dont of this V2XSPaT.

        Don't walk activity by phase. A bit string representing a true or false value for each of the 16 phases in descending order Ex. 00100001 (Phase 1+6)  # noqa: E501

        :param walk_dont: The walk_dont of this V2XSPaT.  # noqa: E501
        :type: str
        """

        self._walk_dont = walk_dont

    @property
    def walk(self):
        """Gets the walk of this V2XSPaT.  # noqa: E501

        Walk activity by phase. A bit string representing a true or false value for each of the 16 phases in descending order Ex. 00100001 (Phase 1+6)  # noqa: E501

        :return: The walk of this V2XSPaT.  # noqa: E501
        :rtype: str
        """
        return self._walk

    @walk.setter
    def walk(self, walk):
        """Sets the walk of this V2XSPaT.

        Walk activity by phase. A bit string representing a true or false value for each of the 16 phases in descending order Ex. 00100001 (Phase 1+6)  # noqa: E501

        :param walk: The walk of this V2XSPaT.  # noqa: E501
        :type: str
        """

        self._walk = walk

    @property
    def flash(self):
        """Gets the flash of this V2XSPaT.  # noqa: E501

        Flashing indicator by phase. A bit string representing a true or false value for each of the 16 phases in descending order Ex. 00100001 (Phase 1+6)  # noqa: E501

        :return: The flash of this V2XSPaT.  # noqa: E501
        :rtype: str
        """
        return self._flash

    @flash.setter
    def flash(self, flash):
        """Sets the flash of this V2XSPaT.

        Flashing indicator by phase. A bit string representing a true or false value for each of the 16 phases in descending order Ex. 00100001 (Phase 1+6)  # noqa: E501

        :param flash: The flash of this V2XSPaT.  # noqa: E501
        :type: str
        """

        self._flash = flash

    @property
    def phases(self):
        """Gets the phases of this V2XSPaT.  # noqa: E501

        Information about each Phase  # noqa: E501

        :return: The phases of this V2XSPaT.  # noqa: E501
        :rtype: list[V2XSPaTPhases]
        """
        return self._phases

    @phases.setter
    def phases(self, phases):
        """Sets the phases of this V2XSPaT.

        Information about each Phase  # noqa: E501

        :param phases: The phases of this V2XSPaT.  # noqa: E501
        :type: list[V2XSPaTPhases]
        """

        self._phases = phases

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2XSPaT, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2XSPaT):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
