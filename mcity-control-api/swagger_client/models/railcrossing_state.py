# coding: utf-8

"""
    Mcity Control API

    Mcity implementation of OCTANE RESTful/Websocket API designed for autonomous and connected vehicle test facilities/cities.  # noqa: E501

    OpenAPI spec version: 0.0.10
    Contact: mcity-engineering@umich.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class RailcrossingState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'manual_call': 'bool',
        'activated': 'bool',
        'phase': 'str',
        'gate': 'bool',
        'audible': 'bool',
        'beacon': 'bool',
        'updated': 'datetime'
    }

    attribute_map = {
        'manual_call': 'manualCall',
        'activated': 'activated',
        'phase': 'phase',
        'gate': 'gate',
        'audible': 'audible',
        'beacon': 'beacon',
        'updated': 'updated'
    }

    def __init__(self, manual_call=None, activated=None, phase=None, gate=None, audible=None, beacon=None, updated=None):  # noqa: E501
        """RailcrossingState - a model defined in Swagger"""  # noqa: E501
        self._manual_call = None
        self._activated = None
        self._phase = None
        self._gate = None
        self._audible = None
        self._beacon = None
        self._updated = None
        self.discriminator = None
        if manual_call is not None:
            self.manual_call = manual_call
        if activated is not None:
            self.activated = activated
        if phase is not None:
            self.phase = phase
        if gate is not None:
            self.gate = gate
        if audible is not None:
            self.audible = audible
        if beacon is not None:
            self.beacon = beacon
        if updated is not None:
            self.updated = updated

    @property
    def manual_call(self):
        """Gets the manual_call of this RailcrossingState.  # noqa: E501

        Manual activation call placed, but has not been serviced.  # noqa: E501

        :return: The manual_call of this RailcrossingState.  # noqa: E501
        :rtype: bool
        """
        return self._manual_call

    @manual_call.setter
    def manual_call(self, manual_call):
        """Sets the manual_call of this RailcrossingState.

        Manual activation call placed, but has not been serviced.  # noqa: E501

        :param manual_call: The manual_call of this RailcrossingState.  # noqa: E501
        :type: bool
        """

        self._manual_call = manual_call

    @property
    def activated(self):
        """Gets the activated of this RailcrossingState.  # noqa: E501

        Is the rail crossing cycle activated  # noqa: E501

        :return: The activated of this RailcrossingState.  # noqa: E501
        :rtype: bool
        """
        return self._activated

    @activated.setter
    def activated(self, activated):
        """Sets the activated of this RailcrossingState.

        Is the rail crossing cycle activated  # noqa: E501

        :param activated: The activated of this RailcrossingState.  # noqa: E501
        :type: bool
        """

        self._activated = activated

    @property
    def phase(self):
        """Gets the phase of this RailcrossingState.  # noqa: E501

        The current phase of the rail crossing if instrumented  # noqa: E501

        :return: The phase of this RailcrossingState.  # noqa: E501
        :rtype: str
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this RailcrossingState.

        The current phase of the rail crossing if instrumented  # noqa: E501

        :param phase: The phase of this RailcrossingState.  # noqa: E501
        :type: str
        """
        allowed_values = ["presignal", "closing", "closed", "opening", "postsignal", "open"]  # noqa: E501
        if phase not in allowed_values:
            raise ValueError(
                "Invalid value for `phase` ({0}), must be one of {1}"  # noqa: E501
                .format(phase, allowed_values)
            )

        self._phase = phase

    @property
    def gate(self):
        """Gets the gate of this RailcrossingState.  # noqa: E501

        True if the gate is down/in motion.  # noqa: E501

        :return: The gate of this RailcrossingState.  # noqa: E501
        :rtype: bool
        """
        return self._gate

    @gate.setter
    def gate(self, gate):
        """Sets the gate of this RailcrossingState.

        True if the gate is down/in motion.  # noqa: E501

        :param gate: The gate of this RailcrossingState.  # noqa: E501
        :type: bool
        """

        self._gate = gate

    @property
    def audible(self):
        """Gets the audible of this RailcrossingState.  # noqa: E501

        True if audible tone is activated.  # noqa: E501

        :return: The audible of this RailcrossingState.  # noqa: E501
        :rtype: bool
        """
        return self._audible

    @audible.setter
    def audible(self, audible):
        """Sets the audible of this RailcrossingState.

        True if audible tone is activated.  # noqa: E501

        :param audible: The audible of this RailcrossingState.  # noqa: E501
        :type: bool
        """

        self._audible = audible

    @property
    def beacon(self):
        """Gets the beacon of this RailcrossingState.  # noqa: E501

        True if beacon is activated.  # noqa: E501

        :return: The beacon of this RailcrossingState.  # noqa: E501
        :rtype: bool
        """
        return self._beacon

    @beacon.setter
    def beacon(self, beacon):
        """Sets the beacon of this RailcrossingState.

        True if beacon is activated.  # noqa: E501

        :param beacon: The beacon of this RailcrossingState.  # noqa: E501
        :type: bool
        """

        self._beacon = beacon

    @property
    def updated(self):
        """Gets the updated of this RailcrossingState.  # noqa: E501

        The last time the status of this rail crossing was updated  # noqa: E501

        :return: The updated of this RailcrossingState.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this RailcrossingState.

        The last time the status of this rail crossing was updated  # noqa: E501

        :param updated: The updated of this RailcrossingState.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RailcrossingState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RailcrossingState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
