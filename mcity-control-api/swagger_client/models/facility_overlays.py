# coding: utf-8

"""
    Mcity Control API

    Mcity implementation of OCTANE RESTful/Websocket API designed for autonomous and connected vehicle test facilities/cities.  # noqa: E501

    OpenAPI spec version: 0.0.10
    Contact: mcity-engineering@umich.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class FacilityOverlays(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'ul': 'FacilityUl',
        'lr': 'FacilityLr',
        'url': 'str',
        'opacity': 'int'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'ul': 'ul',
        'lr': 'lr',
        'url': 'url',
        'opacity': 'opacity'
    }

    def __init__(self, name=None, description=None, ul=None, lr=None, url=None, opacity=None):  # noqa: E501
        """FacilityOverlays - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._ul = None
        self._lr = None
        self._url = None
        self._opacity = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if ul is not None:
            self.ul = ul
        if lr is not None:
            self.lr = lr
        if url is not None:
            self.url = url
        if opacity is not None:
            self.opacity = opacity

    @property
    def name(self):
        """Gets the name of this FacilityOverlays.  # noqa: E501

        A name describing the contends of the overlay.  # noqa: E501

        :return: The name of this FacilityOverlays.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FacilityOverlays.

        A name describing the contends of the overlay.  # noqa: E501

        :param name: The name of this FacilityOverlays.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this FacilityOverlays.  # noqa: E501

        A description of the contents of this overlay.  # noqa: E501

        :return: The description of this FacilityOverlays.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FacilityOverlays.

        A description of the contents of this overlay.  # noqa: E501

        :param description: The description of this FacilityOverlays.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def ul(self):
        """Gets the ul of this FacilityOverlays.  # noqa: E501


        :return: The ul of this FacilityOverlays.  # noqa: E501
        :rtype: FacilityUl
        """
        return self._ul

    @ul.setter
    def ul(self, ul):
        """Sets the ul of this FacilityOverlays.


        :param ul: The ul of this FacilityOverlays.  # noqa: E501
        :type: FacilityUl
        """

        self._ul = ul

    @property
    def lr(self):
        """Gets the lr of this FacilityOverlays.  # noqa: E501


        :return: The lr of this FacilityOverlays.  # noqa: E501
        :rtype: FacilityLr
        """
        return self._lr

    @lr.setter
    def lr(self, lr):
        """Sets the lr of this FacilityOverlays.


        :param lr: The lr of this FacilityOverlays.  # noqa: E501
        :type: FacilityLr
        """

        self._lr = lr

    @property
    def url(self):
        """Gets the url of this FacilityOverlays.  # noqa: E501

        A url pointing to the overlay file.  # noqa: E501

        :return: The url of this FacilityOverlays.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this FacilityOverlays.

        A url pointing to the overlay file.  # noqa: E501

        :param url: The url of this FacilityOverlays.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def opacity(self):
        """Gets the opacity of this FacilityOverlays.  # noqa: E501

        A suggested opacity to be used when displaying this layer.  # noqa: E501

        :return: The opacity of this FacilityOverlays.  # noqa: E501
        :rtype: int
        """
        return self._opacity

    @opacity.setter
    def opacity(self, opacity):
        """Sets the opacity of this FacilityOverlays.

        A suggested opacity to be used when displaying this layer.  # noqa: E501

        :param opacity: The opacity of this FacilityOverlays.  # noqa: E501
        :type: int
        """

        self._opacity = opacity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FacilityOverlays, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FacilityOverlays):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
