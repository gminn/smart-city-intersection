# coding: utf-8

"""
    Mcity Control API

    Mcity implementation of OCTANE RESTful/Websocket API designed for autonomous and connected vehicle test facilities/cities.  # noqa: E501

    OpenAPI spec version: 0.0.10
    Contact: mcity-engineering@umich.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PhaseStopBar(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ul': 'PhaseStopBarUl',
        'ur': 'PhaseStopBarUr',
        'll': 'PhaseStopBarLl',
        'lr': 'PhaseStopBarLr'
    }

    attribute_map = {
        'ul': 'ul',
        'ur': 'ur',
        'll': 'll',
        'lr': 'lr'
    }

    def __init__(self, ul=None, ur=None, ll=None, lr=None):  # noqa: E501
        """PhaseStopBar - a model defined in Swagger"""  # noqa: E501
        self._ul = None
        self._ur = None
        self._ll = None
        self._lr = None
        self.discriminator = None
        if ul is not None:
            self.ul = ul
        if ur is not None:
            self.ur = ur
        if ll is not None:
            self.ll = ll
        if lr is not None:
            self.lr = lr

    @property
    def ul(self):
        """Gets the ul of this PhaseStopBar.  # noqa: E501


        :return: The ul of this PhaseStopBar.  # noqa: E501
        :rtype: PhaseStopBarUl
        """
        return self._ul

    @ul.setter
    def ul(self, ul):
        """Sets the ul of this PhaseStopBar.


        :param ul: The ul of this PhaseStopBar.  # noqa: E501
        :type: PhaseStopBarUl
        """

        self._ul = ul

    @property
    def ur(self):
        """Gets the ur of this PhaseStopBar.  # noqa: E501


        :return: The ur of this PhaseStopBar.  # noqa: E501
        :rtype: PhaseStopBarUr
        """
        return self._ur

    @ur.setter
    def ur(self, ur):
        """Sets the ur of this PhaseStopBar.


        :param ur: The ur of this PhaseStopBar.  # noqa: E501
        :type: PhaseStopBarUr
        """

        self._ur = ur

    @property
    def ll(self):
        """Gets the ll of this PhaseStopBar.  # noqa: E501


        :return: The ll of this PhaseStopBar.  # noqa: E501
        :rtype: PhaseStopBarLl
        """
        return self._ll

    @ll.setter
    def ll(self, ll):
        """Sets the ll of this PhaseStopBar.


        :param ll: The ll of this PhaseStopBar.  # noqa: E501
        :type: PhaseStopBarLl
        """

        self._ll = ll

    @property
    def lr(self):
        """Gets the lr of this PhaseStopBar.  # noqa: E501


        :return: The lr of this PhaseStopBar.  # noqa: E501
        :rtype: PhaseStopBarLr
        """
        return self._lr

    @lr.setter
    def lr(self, lr):
        """Sets the lr of this PhaseStopBar.


        :param lr: The lr of this PhaseStopBar.  # noqa: E501
        :type: PhaseStopBarLr
        """

        self._lr = lr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PhaseStopBar, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PhaseStopBar):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
