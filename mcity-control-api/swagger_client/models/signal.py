# coding: utf-8

"""
    Mcity Control API

    Mcity implementation of OCTANE RESTful/Websocket API designed for autonomous and connected vehicle test facilities/cities.  # noqa: E501

    OpenAPI spec version: 0.0.10
    Contact: mcity-engineering@umich.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Signal(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'uri': 'str',
        'name': 'str',
        'url': 'str',
        'longitude': 'float',
        'latitude': 'float',
        'instrument': 'str',
        'direction_facing': 'str',
        'direction_traffic': 'str',
        'orientation': 'str',
        'height': 'float',
        'pole': 'bool',
        'mast': 'bool',
        'mast_angle': 'bool',
        'wire': 'bool',
        'backplate': 'bool',
        'left': 'bool',
        'right': 'bool',
        'straight': 'bool',
        'state': 'SignalState'
    }

    attribute_map = {
        'id': 'id',
        'uri': 'uri',
        'name': 'name',
        'url': 'url',
        'longitude': 'longitude',
        'latitude': 'latitude',
        'instrument': 'instrument',
        'direction_facing': 'directionFacing',
        'direction_traffic': 'directionTraffic',
        'orientation': 'orientation',
        'height': 'height',
        'pole': 'pole',
        'mast': 'mast',
        'mast_angle': 'mastAngle',
        'wire': 'wire',
        'backplate': 'backplate',
        'left': 'left',
        'right': 'right',
        'straight': 'straight',
        'state': 'state'
    }

    def __init__(self, id=None, uri=None, name=None, url=None, longitude=None, latitude=None, instrument=None, direction_facing=None, direction_traffic=None, orientation=None, height=None, pole=None, mast=None, mast_angle=None, wire=None, backplate=None, left=None, right=None, straight=None, state=None):  # noqa: E501
        """Signal - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._uri = None
        self._name = None
        self._url = None
        self._longitude = None
        self._latitude = None
        self._instrument = None
        self._direction_facing = None
        self._direction_traffic = None
        self._orientation = None
        self._height = None
        self._pole = None
        self._mast = None
        self._mast_angle = None
        self._wire = None
        self._backplate = None
        self._left = None
        self._right = None
        self._straight = None
        self._state = None
        self.discriminator = None
        self.id = id
        if uri is not None:
            self.uri = uri
        if name is not None:
            self.name = name
        if url is not None:
            self.url = url
        if longitude is not None:
            self.longitude = longitude
        if latitude is not None:
            self.latitude = latitude
        if instrument is not None:
            self.instrument = instrument
        if direction_facing is not None:
            self.direction_facing = direction_facing
        if direction_traffic is not None:
            self.direction_traffic = direction_traffic
        if orientation is not None:
            self.orientation = orientation
        if height is not None:
            self.height = height
        if pole is not None:
            self.pole = pole
        if mast is not None:
            self.mast = mast
        if mast_angle is not None:
            self.mast_angle = mast_angle
        if wire is not None:
            self.wire = wire
        if backplate is not None:
            self.backplate = backplate
        if left is not None:
            self.left = left
        if right is not None:
            self.right = right
        if straight is not None:
            self.straight = straight
        if state is not None:
            self.state = state

    @property
    def id(self):
        """Gets the id of this Signal.  # noqa: E501

        An ID number identifying this signal set  # noqa: E501

        :return: The id of this Signal.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Signal.

        An ID number identifying this signal set  # noqa: E501

        :param id: The id of this Signal.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def uri(self):
        """Gets the uri of this Signal.  # noqa: E501

        The URI which can be used to access this signal set directly  # noqa: E501

        :return: The uri of this Signal.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Signal.

        The URI which can be used to access this signal set directly  # noqa: E501

        :param uri: The uri of this Signal.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def name(self):
        """Gets the name of this Signal.  # noqa: E501

        A text based description of the signal  # noqa: E501

        :return: The name of this Signal.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Signal.

        A text based description of the signal  # noqa: E501

        :param name: The name of this Signal.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this Signal.  # noqa: E501

        A url with more information about this specific signal  # noqa: E501

        :return: The url of this Signal.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Signal.

        A url with more information about this specific signal  # noqa: E501

        :param url: The url of this Signal.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def longitude(self):
        """Gets the longitude of this Signal.  # noqa: E501

        The longitude of the centroid of the signal set  # noqa: E501

        :return: The longitude of this Signal.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Signal.

        The longitude of the centroid of the signal set  # noqa: E501

        :param longitude: The longitude of this Signal.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def latitude(self):
        """Gets the latitude of this Signal.  # noqa: E501

        The latitude of the centroid of the signal set  # noqa: E501

        :return: The latitude of this Signal.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Signal.

        The latitude of the centroid of the signal set  # noqa: E501

        :param latitude: The latitude of this Signal.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def instrument(self):
        """Gets the instrument of this Signal.  # noqa: E501

        The signal type  # noqa: E501

        :return: The instrument of this Signal.  # noqa: E501
        :rtype: str
        """
        return self._instrument

    @instrument.setter
    def instrument(self, instrument):
        """Sets the instrument of this Signal.

        The signal type  # noqa: E501

        :param instrument: The instrument of this Signal.  # noqa: E501
        :type: str
        """
        allowed_values = ["light"]  # noqa: E501
        if instrument not in allowed_values:
            raise ValueError(
                "Invalid value for `instrument` ({0}), must be one of {1}"  # noqa: E501
                .format(instrument, allowed_values)
            )

        self._instrument = instrument

    @property
    def direction_facing(self):
        """Gets the direction_facing of this Signal.  # noqa: E501

        The direction the signal head is facing  # noqa: E501

        :return: The direction_facing of this Signal.  # noqa: E501
        :rtype: str
        """
        return self._direction_facing

    @direction_facing.setter
    def direction_facing(self, direction_facing):
        """Sets the direction_facing of this Signal.

        The direction the signal head is facing  # noqa: E501

        :param direction_facing: The direction_facing of this Signal.  # noqa: E501
        :type: str
        """
        allowed_values = ["north", "east", "south", "west"]  # noqa: E501
        if direction_facing not in allowed_values:
            raise ValueError(
                "Invalid value for `direction_facing` ({0}), must be one of {1}"  # noqa: E501
                .format(direction_facing, allowed_values)
            )

        self._direction_facing = direction_facing

    @property
    def direction_traffic(self):
        """Gets the direction_traffic of this Signal.  # noqa: E501

        The direction of traffic this signal controls.  # noqa: E501

        :return: The direction_traffic of this Signal.  # noqa: E501
        :rtype: str
        """
        return self._direction_traffic

    @direction_traffic.setter
    def direction_traffic(self, direction_traffic):
        """Sets the direction_traffic of this Signal.

        The direction of traffic this signal controls.  # noqa: E501

        :param direction_traffic: The direction_traffic of this Signal.  # noqa: E501
        :type: str
        """
        allowed_values = ["north", "east", "south", "west"]  # noqa: E501
        if direction_traffic not in allowed_values:
            raise ValueError(
                "Invalid value for `direction_traffic` ({0}), must be one of {1}"  # noqa: E501
                .format(direction_traffic, allowed_values)
            )

        self._direction_traffic = direction_traffic

    @property
    def orientation(self):
        """Gets the orientation of this Signal.  # noqa: E501

        Describes the mounting orientation of the signal heads  # noqa: E501

        :return: The orientation of this Signal.  # noqa: E501
        :rtype: str
        """
        return self._orientation

    @orientation.setter
    def orientation(self, orientation):
        """Sets the orientation of this Signal.

        Describes the mounting orientation of the signal heads  # noqa: E501

        :param orientation: The orientation of this Signal.  # noqa: E501
        :type: str
        """
        allowed_values = ["horizontal", "vertical"]  # noqa: E501
        if orientation not in allowed_values:
            raise ValueError(
                "Invalid value for `orientation` ({0}), must be one of {1}"  # noqa: E501
                .format(orientation, allowed_values)
            )

        self._orientation = orientation

    @property
    def height(self):
        """Gets the height of this Signal.  # noqa: E501

        Height of signal head to road surface in facility units.  # noqa: E501

        :return: The height of this Signal.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Signal.

        Height of signal head to road surface in facility units.  # noqa: E501

        :param height: The height of this Signal.  # noqa: E501
        :type: float
        """

        self._height = height

    @property
    def pole(self):
        """Gets the pole of this Signal.  # noqa: E501

        Is signal mounted to a side pole.  # noqa: E501

        :return: The pole of this Signal.  # noqa: E501
        :rtype: bool
        """
        return self._pole

    @pole.setter
    def pole(self, pole):
        """Sets the pole of this Signal.

        Is signal mounted to a side pole.  # noqa: E501

        :param pole: The pole of this Signal.  # noqa: E501
        :type: bool
        """

        self._pole = pole

    @property
    def mast(self):
        """Gets the mast of this Signal.  # noqa: E501

        Is signal mounted to a mast off the pole pole.  # noqa: E501

        :return: The mast of this Signal.  # noqa: E501
        :rtype: bool
        """
        return self._mast

    @mast.setter
    def mast(self, mast):
        """Sets the mast of this Signal.

        Is signal mounted to a mast off the pole pole.  # noqa: E501

        :param mast: The mast of this Signal.  # noqa: E501
        :type: bool
        """

        self._mast = mast

    @property
    def mast_angle(self):
        """Gets the mast_angle of this Signal.  # noqa: E501

        Is mast angled off the pole  # noqa: E501

        :return: The mast_angle of this Signal.  # noqa: E501
        :rtype: bool
        """
        return self._mast_angle

    @mast_angle.setter
    def mast_angle(self, mast_angle):
        """Sets the mast_angle of this Signal.

        Is mast angled off the pole  # noqa: E501

        :param mast_angle: The mast_angle of this Signal.  # noqa: E501
        :type: bool
        """

        self._mast_angle = mast_angle

    @property
    def wire(self):
        """Gets the wire of this Signal.  # noqa: E501

        Is the signal mounted by wire to the mast or pole  # noqa: E501

        :return: The wire of this Signal.  # noqa: E501
        :rtype: bool
        """
        return self._wire

    @wire.setter
    def wire(self, wire):
        """Sets the wire of this Signal.

        Is the signal mounted by wire to the mast or pole  # noqa: E501

        :param wire: The wire of this Signal.  # noqa: E501
        :type: bool
        """

        self._wire = wire

    @property
    def backplate(self):
        """Gets the backplate of this Signal.  # noqa: E501

        Does the signal have a backplate?  # noqa: E501

        :return: The backplate of this Signal.  # noqa: E501
        :rtype: bool
        """
        return self._backplate

    @backplate.setter
    def backplate(self, backplate):
        """Sets the backplate of this Signal.

        Does the signal have a backplate?  # noqa: E501

        :param backplate: The backplate of this Signal.  # noqa: E501
        :type: bool
        """

        self._backplate = backplate

    @property
    def left(self):
        """Gets the left of this Signal.  # noqa: E501

        This signal set has a signal pointing in this direction  # noqa: E501

        :return: The left of this Signal.  # noqa: E501
        :rtype: bool
        """
        return self._left

    @left.setter
    def left(self, left):
        """Sets the left of this Signal.

        This signal set has a signal pointing in this direction  # noqa: E501

        :param left: The left of this Signal.  # noqa: E501
        :type: bool
        """

        self._left = left

    @property
    def right(self):
        """Gets the right of this Signal.  # noqa: E501

        This signal set has a signal pointing in this direction  # noqa: E501

        :return: The right of this Signal.  # noqa: E501
        :rtype: bool
        """
        return self._right

    @right.setter
    def right(self, right):
        """Sets the right of this Signal.

        This signal set has a signal pointing in this direction  # noqa: E501

        :param right: The right of this Signal.  # noqa: E501
        :type: bool
        """

        self._right = right

    @property
    def straight(self):
        """Gets the straight of this Signal.  # noqa: E501

        This signal set has a signal pointing in this direction  # noqa: E501

        :return: The straight of this Signal.  # noqa: E501
        :rtype: bool
        """
        return self._straight

    @straight.setter
    def straight(self, straight):
        """Sets the straight of this Signal.

        This signal set has a signal pointing in this direction  # noqa: E501

        :param straight: The straight of this Signal.  # noqa: E501
        :type: bool
        """

        self._straight = straight

    @property
    def state(self):
        """Gets the state of this Signal.  # noqa: E501


        :return: The state of this Signal.  # noqa: E501
        :rtype: SignalState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Signal.


        :param state: The state of this Signal.  # noqa: E501
        :type: SignalState
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Signal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Signal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
