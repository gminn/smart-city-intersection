# coding: utf-8

"""
    Mcity Control API

    Mcity implementation of OCTANE RESTful/Websocket API designed for autonomous and connected vehicle test facilities/cities.  # noqa: E501

    OpenAPI spec version: 0.0.10
    Contact: mcity-engineering@umich.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Body36(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'desc': 'str',
        'date_valid': 'datetime',
        'date_expire': 'datetime',
        'facilities': 'list[str]'
    }

    attribute_map = {
        'email': 'email',
        'desc': 'desc',
        'date_valid': 'dateValid',
        'date_expire': 'dateExpire',
        'facilities': 'facilities'
    }

    def __init__(self, email=None, desc=None, date_valid=None, date_expire=None, facilities=None):  # noqa: E501
        """Body36 - a model defined in Swagger"""  # noqa: E501
        self._email = None
        self._desc = None
        self._date_valid = None
        self._date_expire = None
        self._facilities = None
        self.discriminator = None
        if email is not None:
            self.email = email
        if desc is not None:
            self.desc = desc
        if date_valid is not None:
            self.date_valid = date_valid
        if date_expire is not None:
            self.date_expire = date_expire
        if facilities is not None:
            self.facilities = facilities

    @property
    def email(self):
        """Gets the email of this Body36.  # noqa: E501

        Email address of token owner.  # noqa: E501

        :return: The email of this Body36.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Body36.

        Email address of token owner.  # noqa: E501

        :param email: The email of this Body36.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def desc(self):
        """Gets the desc of this Body36.  # noqa: E501

        Event Identifier  # noqa: E501

        :return: The desc of this Body36.  # noqa: E501
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this Body36.

        Event Identifier  # noqa: E501

        :param desc: The desc of this Body36.  # noqa: E501
        :type: str
        """

        self._desc = desc

    @property
    def date_valid(self):
        """Gets the date_valid of this Body36.  # noqa: E501

        UTC valid date time  # noqa: E501

        :return: The date_valid of this Body36.  # noqa: E501
        :rtype: datetime
        """
        return self._date_valid

    @date_valid.setter
    def date_valid(self, date_valid):
        """Sets the date_valid of this Body36.

        UTC valid date time  # noqa: E501

        :param date_valid: The date_valid of this Body36.  # noqa: E501
        :type: datetime
        """

        self._date_valid = date_valid

    @property
    def date_expire(self):
        """Gets the date_expire of this Body36.  # noqa: E501

        UTC expiration date time  # noqa: E501

        :return: The date_expire of this Body36.  # noqa: E501
        :rtype: datetime
        """
        return self._date_expire

    @date_expire.setter
    def date_expire(self, date_expire):
        """Sets the date_expire of this Body36.

        UTC expiration date time  # noqa: E501

        :param date_expire: The date_expire of this Body36.  # noqa: E501
        :type: datetime
        """

        self._date_expire = date_expire

    @property
    def facilities(self):
        """Gets the facilities of this Body36.  # noqa: E501


        :return: The facilities of this Body36.  # noqa: E501
        :rtype: list[str]
        """
        return self._facilities

    @facilities.setter
    def facilities(self, facilities):
        """Sets the facilities of this Body36.


        :param facilities: The facilities of this Body36.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["Mcity", "Urban", "Highway", "Garage"]  # noqa: E501
        if not set(facilities).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `facilities` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(facilities) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._facilities = facilities

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body36, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body36):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
