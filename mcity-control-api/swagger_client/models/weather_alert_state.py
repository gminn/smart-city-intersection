# coding: utf-8

"""
    Mcity Control API

    Mcity implementation of OCTANE RESTful/Websocket API designed for autonomous and connected vehicle test facilities/cities.  # noqa: E501

    OpenAPI spec version: 0.0.10
    Contact: mcity-engineering@umich.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class WeatherAlertState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event': 'str',
        'date_valid': 'str',
        'onset': 'str',
        'date_expire': 'str',
        'ends': 'str',
        'status': 'str',
        'severity': 'str',
        'certainty': 'str',
        'urgency': 'str',
        'updated': 'str'
    }

    attribute_map = {
        'event': 'event',
        'date_valid': 'dateValid',
        'onset': 'onset',
        'date_expire': 'dateExpire',
        'ends': 'ends',
        'status': 'status',
        'severity': 'severity',
        'certainty': 'certainty',
        'urgency': 'urgency',
        'updated': 'updated'
    }

    def __init__(self, event=None, date_valid=None, onset=None, date_expire=None, ends=None, status=None, severity=None, certainty=None, urgency=None, updated=None):  # noqa: E501
        """WeatherAlertState - a model defined in Swagger"""  # noqa: E501
        self._event = None
        self._date_valid = None
        self._onset = None
        self._date_expire = None
        self._ends = None
        self._status = None
        self._severity = None
        self._certainty = None
        self._urgency = None
        self._updated = None
        self.discriminator = None
        self.event = event
        self.date_valid = date_valid
        self.onset = onset
        self.date_expire = date_expire
        if ends is not None:
            self.ends = ends
        self.status = status
        self.severity = severity
        self.certainty = certainty
        self.urgency = urgency
        if updated is not None:
            self.updated = updated

    @property
    def event(self):
        """Gets the event of this WeatherAlertState.  # noqa: E501

        The event name  # noqa: E501

        :return: The event of this WeatherAlertState.  # noqa: E501
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this WeatherAlertState.

        The event name  # noqa: E501

        :param event: The event of this WeatherAlertState.  # noqa: E501
        :type: str
        """
        if event is None:
            raise ValueError("Invalid value for `event`, must not be `None`")  # noqa: E501

        self._event = event

    @property
    def date_valid(self):
        """Gets the date_valid of this WeatherAlertState.  # noqa: E501

        The DateTime the alert is effective  # noqa: E501

        :return: The date_valid of this WeatherAlertState.  # noqa: E501
        :rtype: str
        """
        return self._date_valid

    @date_valid.setter
    def date_valid(self, date_valid):
        """Sets the date_valid of this WeatherAlertState.

        The DateTime the alert is effective  # noqa: E501

        :param date_valid: The date_valid of this WeatherAlertState.  # noqa: E501
        :type: str
        """
        if date_valid is None:
            raise ValueError("Invalid value for `date_valid`, must not be `None`")  # noqa: E501

        self._date_valid = date_valid

    @property
    def onset(self):
        """Gets the onset of this WeatherAlertState.  # noqa: E501

        The DateTime of the onset of the event  # noqa: E501

        :return: The onset of this WeatherAlertState.  # noqa: E501
        :rtype: str
        """
        return self._onset

    @onset.setter
    def onset(self, onset):
        """Sets the onset of this WeatherAlertState.

        The DateTime of the onset of the event  # noqa: E501

        :param onset: The onset of this WeatherAlertState.  # noqa: E501
        :type: str
        """
        if onset is None:
            raise ValueError("Invalid value for `onset`, must not be `None`")  # noqa: E501

        self._onset = onset

    @property
    def date_expire(self):
        """Gets the date_expire of this WeatherAlertState.  # noqa: E501

        The DateTime when the alert expires  # noqa: E501

        :return: The date_expire of this WeatherAlertState.  # noqa: E501
        :rtype: str
        """
        return self._date_expire

    @date_expire.setter
    def date_expire(self, date_expire):
        """Sets the date_expire of this WeatherAlertState.

        The DateTime when the alert expires  # noqa: E501

        :param date_expire: The date_expire of this WeatherAlertState.  # noqa: E501
        :type: str
        """
        if date_expire is None:
            raise ValueError("Invalid value for `date_expire`, must not be `None`")  # noqa: E501

        self._date_expire = date_expire

    @property
    def ends(self):
        """Gets the ends of this WeatherAlertState.  # noqa: E501

        The DateTime of the end of the event  # noqa: E501

        :return: The ends of this WeatherAlertState.  # noqa: E501
        :rtype: str
        """
        return self._ends

    @ends.setter
    def ends(self, ends):
        """Sets the ends of this WeatherAlertState.

        The DateTime of the end of the event  # noqa: E501

        :param ends: The ends of this WeatherAlertState.  # noqa: E501
        :type: str
        """

        self._ends = ends

    @property
    def status(self):
        """Gets the status of this WeatherAlertState.  # noqa: E501

        Status (actual, exercise, system, test, draft)  # noqa: E501

        :return: The status of this WeatherAlertState.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WeatherAlertState.

        Status (actual, exercise, system, test, draft)  # noqa: E501

        :param status: The status of this WeatherAlertState.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def severity(self):
        """Gets the severity of this WeatherAlertState.  # noqa: E501

        Severity (extreme, severe, moderate, minor, unknown)  # noqa: E501

        :return: The severity of this WeatherAlertState.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this WeatherAlertState.

        Severity (extreme, severe, moderate, minor, unknown)  # noqa: E501

        :param severity: The severity of this WeatherAlertState.  # noqa: E501
        :type: str
        """
        if severity is None:
            raise ValueError("Invalid value for `severity`, must not be `None`")  # noqa: E501

        self._severity = severity

    @property
    def certainty(self):
        """Gets the certainty of this WeatherAlertState.  # noqa: E501

        Certainty (observed, likely, possible, unlikely, unknown)  # noqa: E501

        :return: The certainty of this WeatherAlertState.  # noqa: E501
        :rtype: str
        """
        return self._certainty

    @certainty.setter
    def certainty(self, certainty):
        """Sets the certainty of this WeatherAlertState.

        Certainty (observed, likely, possible, unlikely, unknown)  # noqa: E501

        :param certainty: The certainty of this WeatherAlertState.  # noqa: E501
        :type: str
        """
        if certainty is None:
            raise ValueError("Invalid value for `certainty`, must not be `None`")  # noqa: E501

        self._certainty = certainty

    @property
    def urgency(self):
        """Gets the urgency of this WeatherAlertState.  # noqa: E501

        Urgency (immediate, expected, future, past, unknown)  # noqa: E501

        :return: The urgency of this WeatherAlertState.  # noqa: E501
        :rtype: str
        """
        return self._urgency

    @urgency.setter
    def urgency(self, urgency):
        """Sets the urgency of this WeatherAlertState.

        Urgency (immediate, expected, future, past, unknown)  # noqa: E501

        :param urgency: The urgency of this WeatherAlertState.  # noqa: E501
        :type: str
        """
        if urgency is None:
            raise ValueError("Invalid value for `urgency`, must not be `None`")  # noqa: E501

        self._urgency = urgency

    @property
    def updated(self):
        """Gets the updated of this WeatherAlertState.  # noqa: E501

        The last time the status of this alert was updated.  # noqa: E501

        :return: The updated of this WeatherAlertState.  # noqa: E501
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this WeatherAlertState.

        The last time the status of this alert was updated.  # noqa: E501

        :param updated: The updated of this WeatherAlertState.  # noqa: E501
        :type: str
        """

        self._updated = updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WeatherAlertState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WeatherAlertState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
