# coding: utf-8

"""
    Mcity Control API

    Mcity implementation of OCTANE RESTful/Websocket API designed for autonomous and connected vehicle test facilities/cities.  # noqa: E501

    OpenAPI spec version: 0.0.10
    Contact: mcity-engineering@umich.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class IntersectionStatePhases(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'phase': 'int',
        'color': 'str',
        'veh_time_min': 'float',
        'veh_time_max': 'float',
        'call_vehicle': 'bool',
        'call_pedestrian': 'bool',
        'omit': 'bool',
        'omit_pedestrian': 'bool',
        'hold': 'bool',
        'force_off': 'bool',
        'pedestrian_clear': 'bool',
        'walk_dont': 'bool',
        'walk': 'bool'
    }

    attribute_map = {
        'phase': 'phase',
        'color': 'color',
        'veh_time_min': 'vehTimeMin',
        'veh_time_max': 'vehTimeMax',
        'call_vehicle': 'callVehicle',
        'call_pedestrian': 'callPedestrian',
        'omit': 'omit',
        'omit_pedestrian': 'omitPedestrian',
        'hold': 'hold',
        'force_off': 'forceOff',
        'pedestrian_clear': 'pedestrianClear',
        'walk_dont': 'walkDont',
        'walk': 'walk'
    }

    def __init__(self, phase=None, color=None, veh_time_min=None, veh_time_max=None, call_vehicle=None, call_pedestrian=None, omit=None, omit_pedestrian=None, hold=None, force_off=None, pedestrian_clear=None, walk_dont=None, walk=None):  # noqa: E501
        """IntersectionStatePhases - a model defined in Swagger"""  # noqa: E501
        self._phase = None
        self._color = None
        self._veh_time_min = None
        self._veh_time_max = None
        self._call_vehicle = None
        self._call_pedestrian = None
        self._omit = None
        self._omit_pedestrian = None
        self._hold = None
        self._force_off = None
        self._pedestrian_clear = None
        self._walk_dont = None
        self._walk = None
        self.discriminator = None
        if phase is not None:
            self.phase = phase
        if color is not None:
            self.color = color
        if veh_time_min is not None:
            self.veh_time_min = veh_time_min
        if veh_time_max is not None:
            self.veh_time_max = veh_time_max
        if call_vehicle is not None:
            self.call_vehicle = call_vehicle
        if call_pedestrian is not None:
            self.call_pedestrian = call_pedestrian
        if omit is not None:
            self.omit = omit
        if omit_pedestrian is not None:
            self.omit_pedestrian = omit_pedestrian
        if hold is not None:
            self.hold = hold
        if force_off is not None:
            self.force_off = force_off
        if pedestrian_clear is not None:
            self.pedestrian_clear = pedestrian_clear
        if walk_dont is not None:
            self.walk_dont = walk_dont
        if walk is not None:
            self.walk = walk

    @property
    def phase(self):
        """Gets the phase of this IntersectionStatePhases.  # noqa: E501

        Phase ID number  # noqa: E501

        :return: The phase of this IntersectionStatePhases.  # noqa: E501
        :rtype: int
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this IntersectionStatePhases.

        Phase ID number  # noqa: E501

        :param phase: The phase of this IntersectionStatePhases.  # noqa: E501
        :type: int
        """

        self._phase = phase

    @property
    def color(self):
        """Gets the color of this IntersectionStatePhases.  # noqa: E501

        The displayed color of the current Phase  # noqa: E501

        :return: The color of this IntersectionStatePhases.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this IntersectionStatePhases.

        The displayed color of the current Phase  # noqa: E501

        :param color: The color of this IntersectionStatePhases.  # noqa: E501
        :type: str
        """
        allowed_values = ["GREEN", "RED", "YELLOW"]  # noqa: E501
        if color not in allowed_values:
            raise ValueError(
                "Invalid value for `color` ({0}), must be one of {1}"  # noqa: E501
                .format(color, allowed_values)
            )

        self._color = color

    @property
    def veh_time_min(self):
        """Gets the veh_time_min of this IntersectionStatePhases.  # noqa: E501

        Minimum time (seconds) until next phase for vehicle.  # noqa: E501

        :return: The veh_time_min of this IntersectionStatePhases.  # noqa: E501
        :rtype: float
        """
        return self._veh_time_min

    @veh_time_min.setter
    def veh_time_min(self, veh_time_min):
        """Sets the veh_time_min of this IntersectionStatePhases.

        Minimum time (seconds) until next phase for vehicle.  # noqa: E501

        :param veh_time_min: The veh_time_min of this IntersectionStatePhases.  # noqa: E501
        :type: float
        """

        self._veh_time_min = veh_time_min

    @property
    def veh_time_max(self):
        """Gets the veh_time_max of this IntersectionStatePhases.  # noqa: E501

        Minimum time (seconds) until next phase for vehicle.  # noqa: E501

        :return: The veh_time_max of this IntersectionStatePhases.  # noqa: E501
        :rtype: float
        """
        return self._veh_time_max

    @veh_time_max.setter
    def veh_time_max(self, veh_time_max):
        """Sets the veh_time_max of this IntersectionStatePhases.

        Minimum time (seconds) until next phase for vehicle.  # noqa: E501

        :param veh_time_max: The veh_time_max of this IntersectionStatePhases.  # noqa: E501
        :type: float
        """

        self._veh_time_max = veh_time_max

    @property
    def call_vehicle(self):
        """Gets the call_vehicle of this IntersectionStatePhases.  # noqa: E501

        A vehicle call has been placed for this phase.  # noqa: E501

        :return: The call_vehicle of this IntersectionStatePhases.  # noqa: E501
        :rtype: bool
        """
        return self._call_vehicle

    @call_vehicle.setter
    def call_vehicle(self, call_vehicle):
        """Sets the call_vehicle of this IntersectionStatePhases.

        A vehicle call has been placed for this phase.  # noqa: E501

        :param call_vehicle: The call_vehicle of this IntersectionStatePhases.  # noqa: E501
        :type: bool
        """

        self._call_vehicle = call_vehicle

    @property
    def call_pedestrian(self):
        """Gets the call_pedestrian of this IntersectionStatePhases.  # noqa: E501

        A pedestrian call has been placed for this phase.  # noqa: E501

        :return: The call_pedestrian of this IntersectionStatePhases.  # noqa: E501
        :rtype: bool
        """
        return self._call_pedestrian

    @call_pedestrian.setter
    def call_pedestrian(self, call_pedestrian):
        """Sets the call_pedestrian of this IntersectionStatePhases.

        A pedestrian call has been placed for this phase.  # noqa: E501

        :param call_pedestrian: The call_pedestrian of this IntersectionStatePhases.  # noqa: E501
        :type: bool
        """

        self._call_pedestrian = call_pedestrian

    @property
    def omit(self):
        """Gets the omit of this IntersectionStatePhases.  # noqa: E501

        An omit has been placed for this phase.  # noqa: E501

        :return: The omit of this IntersectionStatePhases.  # noqa: E501
        :rtype: bool
        """
        return self._omit

    @omit.setter
    def omit(self, omit):
        """Sets the omit of this IntersectionStatePhases.

        An omit has been placed for this phase.  # noqa: E501

        :param omit: The omit of this IntersectionStatePhases.  # noqa: E501
        :type: bool
        """

        self._omit = omit

    @property
    def omit_pedestrian(self):
        """Gets the omit_pedestrian of this IntersectionStatePhases.  # noqa: E501

        A pedestrian omit has been placed for this phase.  # noqa: E501

        :return: The omit_pedestrian of this IntersectionStatePhases.  # noqa: E501
        :rtype: bool
        """
        return self._omit_pedestrian

    @omit_pedestrian.setter
    def omit_pedestrian(self, omit_pedestrian):
        """Sets the omit_pedestrian of this IntersectionStatePhases.

        A pedestrian omit has been placed for this phase.  # noqa: E501

        :param omit_pedestrian: The omit_pedestrian of this IntersectionStatePhases.  # noqa: E501
        :type: bool
        """

        self._omit_pedestrian = omit_pedestrian

    @property
    def hold(self):
        """Gets the hold of this IntersectionStatePhases.  # noqa: E501

        A hold has been placed for this phase.  # noqa: E501

        :return: The hold of this IntersectionStatePhases.  # noqa: E501
        :rtype: bool
        """
        return self._hold

    @hold.setter
    def hold(self, hold):
        """Sets the hold of this IntersectionStatePhases.

        A hold has been placed for this phase.  # noqa: E501

        :param hold: The hold of this IntersectionStatePhases.  # noqa: E501
        :type: bool
        """

        self._hold = hold

    @property
    def force_off(self):
        """Gets the force_off of this IntersectionStatePhases.  # noqa: E501

        This phase has a force off active  # noqa: E501

        :return: The force_off of this IntersectionStatePhases.  # noqa: E501
        :rtype: bool
        """
        return self._force_off

    @force_off.setter
    def force_off(self, force_off):
        """Sets the force_off of this IntersectionStatePhases.

        This phase has a force off active  # noqa: E501

        :param force_off: The force_off of this IntersectionStatePhases.  # noqa: E501
        :type: bool
        """

        self._force_off = force_off

    @property
    def pedestrian_clear(self):
        """Gets the pedestrian_clear of this IntersectionStatePhases.  # noqa: E501

        Pedestrian clear is active  # noqa: E501

        :return: The pedestrian_clear of this IntersectionStatePhases.  # noqa: E501
        :rtype: bool
        """
        return self._pedestrian_clear

    @pedestrian_clear.setter
    def pedestrian_clear(self, pedestrian_clear):
        """Sets the pedestrian_clear of this IntersectionStatePhases.

        Pedestrian clear is active  # noqa: E501

        :param pedestrian_clear: The pedestrian_clear of this IntersectionStatePhases.  # noqa: E501
        :type: bool
        """

        self._pedestrian_clear = pedestrian_clear

    @property
    def walk_dont(self):
        """Gets the walk_dont of this IntersectionStatePhases.  # noqa: E501

        DONT WALK sign is active  # noqa: E501

        :return: The walk_dont of this IntersectionStatePhases.  # noqa: E501
        :rtype: bool
        """
        return self._walk_dont

    @walk_dont.setter
    def walk_dont(self, walk_dont):
        """Sets the walk_dont of this IntersectionStatePhases.

        DONT WALK sign is active  # noqa: E501

        :param walk_dont: The walk_dont of this IntersectionStatePhases.  # noqa: E501
        :type: bool
        """

        self._walk_dont = walk_dont

    @property
    def walk(self):
        """Gets the walk of this IntersectionStatePhases.  # noqa: E501

        WALK sign is active  # noqa: E501

        :return: The walk of this IntersectionStatePhases.  # noqa: E501
        :rtype: bool
        """
        return self._walk

    @walk.setter
    def walk(self, walk):
        """Sets the walk of this IntersectionStatePhases.

        WALK sign is active  # noqa: E501

        :param walk: The walk of this IntersectionStatePhases.  # noqa: E501
        :type: bool
        """

        self._walk = walk

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IntersectionStatePhases, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntersectionStatePhases):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
