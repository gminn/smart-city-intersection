# coding: utf-8

"""
    Mcity Control API

    Mcity implementation of OCTANE RESTful/Websocket API designed for autonomous and connected vehicle test facilities/cities.  # noqa: E501

    OpenAPI spec version: 0.0.10
    Contact: mcity-engineering@umich.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Light(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'uri': 'str',
        'name': 'str',
        'url': 'str',
        'longitude': 'float',
        'latitude': 'float',
        'max_watt_power': 'float',
        'manufacturer': 'str',
        'model': 'str',
        'control_type': 'str',
        'state': 'LightState'
    }

    attribute_map = {
        'id': 'id',
        'uri': 'uri',
        'name': 'name',
        'url': 'url',
        'longitude': 'longitude',
        'latitude': 'latitude',
        'max_watt_power': 'maxWattPower',
        'manufacturer': 'manufacturer',
        'model': 'model',
        'control_type': 'controlType',
        'state': 'state'
    }

    def __init__(self, id=None, uri=None, name=None, url=None, longitude=None, latitude=None, max_watt_power=None, manufacturer=None, model=None, control_type=None, state=None):  # noqa: E501
        """Light - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._uri = None
        self._name = None
        self._url = None
        self._longitude = None
        self._latitude = None
        self._max_watt_power = None
        self._manufacturer = None
        self._model = None
        self._control_type = None
        self._state = None
        self.discriminator = None
        self.id = id
        if uri is not None:
            self.uri = uri
        if name is not None:
            self.name = name
        if url is not None:
            self.url = url
        if longitude is not None:
            self.longitude = longitude
        if latitude is not None:
            self.latitude = latitude
        if max_watt_power is not None:
            self.max_watt_power = max_watt_power
        if manufacturer is not None:
            self.manufacturer = manufacturer
        if model is not None:
            self.model = model
        if control_type is not None:
            self.control_type = control_type
        if state is not None:
            self.state = state

    @property
    def id(self):
        """Gets the id of this Light.  # noqa: E501

        An ID number identifying this street light  # noqa: E501

        :return: The id of this Light.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Light.

        An ID number identifying this street light  # noqa: E501

        :param id: The id of this Light.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def uri(self):
        """Gets the uri of this Light.  # noqa: E501

        The URI which can be used to access this street light directly  # noqa: E501

        :return: The uri of this Light.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Light.

        The URI which can be used to access this street light directly  # noqa: E501

        :param uri: The uri of this Light.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def name(self):
        """Gets the name of this Light.  # noqa: E501

        A text based description of the street light  # noqa: E501

        :return: The name of this Light.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Light.

        A text based description of the street light  # noqa: E501

        :param name: The name of this Light.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this Light.  # noqa: E501

        A url with more information about this specific street light  # noqa: E501

        :return: The url of this Light.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Light.

        A url with more information about this specific street light  # noqa: E501

        :param url: The url of this Light.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def longitude(self):
        """Gets the longitude of this Light.  # noqa: E501

        The longitude of the centroid of the street light  # noqa: E501

        :return: The longitude of this Light.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Light.

        The longitude of the centroid of the street light  # noqa: E501

        :param longitude: The longitude of this Light.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def latitude(self):
        """Gets the latitude of this Light.  # noqa: E501

        The latitude of the centroid of the street light  # noqa: E501

        :return: The latitude of this Light.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Light.

        The latitude of the centroid of the street light  # noqa: E501

        :param latitude: The latitude of this Light.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def max_watt_power(self):
        """Gets the max_watt_power of this Light.  # noqa: E501

        The maximum watt power of the street light  # noqa: E501

        :return: The max_watt_power of this Light.  # noqa: E501
        :rtype: float
        """
        return self._max_watt_power

    @max_watt_power.setter
    def max_watt_power(self, max_watt_power):
        """Sets the max_watt_power of this Light.

        The maximum watt power of the street light  # noqa: E501

        :param max_watt_power: The max_watt_power of this Light.  # noqa: E501
        :type: float
        """

        self._max_watt_power = max_watt_power

    @property
    def manufacturer(self):
        """Gets the manufacturer of this Light.  # noqa: E501

        The manufacturer of the street light  # noqa: E501

        :return: The manufacturer of this Light.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this Light.

        The manufacturer of the street light  # noqa: E501

        :param manufacturer: The manufacturer of this Light.  # noqa: E501
        :type: str
        """

        self._manufacturer = manufacturer

    @property
    def model(self):
        """Gets the model of this Light.  # noqa: E501

        The model of the street light  # noqa: E501

        :return: The model of this Light.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this Light.

        The model of the street light  # noqa: E501

        :param model: The model of this Light.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def control_type(self):
        """Gets the control_type of this Light.  # noqa: E501

        The control type of the street light  # noqa: E501

        :return: The control_type of this Light.  # noqa: E501
        :rtype: str
        """
        return self._control_type

    @control_type.setter
    def control_type(self, control_type):
        """Sets the control_type of this Light.

        The control type of the street light  # noqa: E501

        :param control_type: The control_type of this Light.  # noqa: E501
        :type: str
        """

        self._control_type = control_type

    @property
    def state(self):
        """Gets the state of this Light.  # noqa: E501


        :return: The state of this Light.  # noqa: E501
        :rtype: LightState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Light.


        :param state: The state of this Light.  # noqa: E501
        :type: LightState
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Light, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Light):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
