# coding: utf-8

"""
    Mcity Control API

    Mcity implementation of OCTANE RESTful/Websocket API designed for autonomous and connected vehicle test facilities/cities.  # noqa: E501

    OpenAPI spec version: 0.0.10
    Contact: mcity-engineering@umich.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class V2XSPaTPhases(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'phase': 'int',
        'color': 'str',
        'flash': 'bool',
        'veh_time_min': 'float',
        'veh_time_max': 'float',
        'ped_time_min': 'float',
        'ped_time_max': 'float'
    }

    attribute_map = {
        'phase': 'phase',
        'color': 'color',
        'flash': 'flash',
        'veh_time_min': 'vehTimeMin',
        'veh_time_max': 'vehTimeMax',
        'ped_time_min': 'pedTimeMin',
        'ped_time_max': 'pedTimeMax'
    }

    def __init__(self, phase=None, color=None, flash=None, veh_time_min=None, veh_time_max=None, ped_time_min=None, ped_time_max=None):  # noqa: E501
        """V2XSPaTPhases - a model defined in Swagger"""  # noqa: E501
        self._phase = None
        self._color = None
        self._flash = None
        self._veh_time_min = None
        self._veh_time_max = None
        self._ped_time_min = None
        self._ped_time_max = None
        self.discriminator = None
        if phase is not None:
            self.phase = phase
        if color is not None:
            self.color = color
        if flash is not None:
            self.flash = flash
        if veh_time_min is not None:
            self.veh_time_min = veh_time_min
        if veh_time_max is not None:
            self.veh_time_max = veh_time_max
        if ped_time_min is not None:
            self.ped_time_min = ped_time_min
        if ped_time_max is not None:
            self.ped_time_max = ped_time_max

    @property
    def phase(self):
        """Gets the phase of this V2XSPaTPhases.  # noqa: E501

        Phase ID number  # noqa: E501

        :return: The phase of this V2XSPaTPhases.  # noqa: E501
        :rtype: int
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this V2XSPaTPhases.

        Phase ID number  # noqa: E501

        :param phase: The phase of this V2XSPaTPhases.  # noqa: E501
        :type: int
        """

        self._phase = phase

    @property
    def color(self):
        """Gets the color of this V2XSPaTPhases.  # noqa: E501

        The displayed color of the current Phase  # noqa: E501

        :return: The color of this V2XSPaTPhases.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this V2XSPaTPhases.

        The displayed color of the current Phase  # noqa: E501

        :param color: The color of this V2XSPaTPhases.  # noqa: E501
        :type: str
        """
        allowed_values = ["GREEN", "RED", "YELLOW"]  # noqa: E501
        if color not in allowed_values:
            raise ValueError(
                "Invalid value for `color` ({0}), must be one of {1}"  # noqa: E501
                .format(color, allowed_values)
            )

        self._color = color

    @property
    def flash(self):
        """Gets the flash of this V2XSPaTPhases.  # noqa: E501

        Is the signal flashing?  # noqa: E501

        :return: The flash of this V2XSPaTPhases.  # noqa: E501
        :rtype: bool
        """
        return self._flash

    @flash.setter
    def flash(self, flash):
        """Sets the flash of this V2XSPaTPhases.

        Is the signal flashing?  # noqa: E501

        :param flash: The flash of this V2XSPaTPhases.  # noqa: E501
        :type: bool
        """

        self._flash = flash

    @property
    def veh_time_min(self):
        """Gets the veh_time_min of this V2XSPaTPhases.  # noqa: E501

        Minimum time (seconds) until next phase for vehicle.  # noqa: E501

        :return: The veh_time_min of this V2XSPaTPhases.  # noqa: E501
        :rtype: float
        """
        return self._veh_time_min

    @veh_time_min.setter
    def veh_time_min(self, veh_time_min):
        """Sets the veh_time_min of this V2XSPaTPhases.

        Minimum time (seconds) until next phase for vehicle.  # noqa: E501

        :param veh_time_min: The veh_time_min of this V2XSPaTPhases.  # noqa: E501
        :type: float
        """

        self._veh_time_min = veh_time_min

    @property
    def veh_time_max(self):
        """Gets the veh_time_max of this V2XSPaTPhases.  # noqa: E501

        Minimum time (seconds) until next phase for vehicle.  # noqa: E501

        :return: The veh_time_max of this V2XSPaTPhases.  # noqa: E501
        :rtype: float
        """
        return self._veh_time_max

    @veh_time_max.setter
    def veh_time_max(self, veh_time_max):
        """Sets the veh_time_max of this V2XSPaTPhases.

        Minimum time (seconds) until next phase for vehicle.  # noqa: E501

        :param veh_time_max: The veh_time_max of this V2XSPaTPhases.  # noqa: E501
        :type: float
        """

        self._veh_time_max = veh_time_max

    @property
    def ped_time_min(self):
        """Gets the ped_time_min of this V2XSPaTPhases.  # noqa: E501

        Minimum time (seconds) until next phase for vehicle.  # noqa: E501

        :return: The ped_time_min of this V2XSPaTPhases.  # noqa: E501
        :rtype: float
        """
        return self._ped_time_min

    @ped_time_min.setter
    def ped_time_min(self, ped_time_min):
        """Sets the ped_time_min of this V2XSPaTPhases.

        Minimum time (seconds) until next phase for vehicle.  # noqa: E501

        :param ped_time_min: The ped_time_min of this V2XSPaTPhases.  # noqa: E501
        :type: float
        """

        self._ped_time_min = ped_time_min

    @property
    def ped_time_max(self):
        """Gets the ped_time_max of this V2XSPaTPhases.  # noqa: E501

        Minimum time (seconds) until next phase for vehicle.  # noqa: E501

        :return: The ped_time_max of this V2XSPaTPhases.  # noqa: E501
        :rtype: float
        """
        return self._ped_time_max

    @ped_time_max.setter
    def ped_time_max(self, ped_time_max):
        """Sets the ped_time_max of this V2XSPaTPhases.

        Minimum time (seconds) until next phase for vehicle.  # noqa: E501

        :param ped_time_max: The ped_time_max of this V2XSPaTPhases.  # noqa: E501
        :type: float
        """

        self._ped_time_max = ped_time_max

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2XSPaTPhases, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2XSPaTPhases):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
