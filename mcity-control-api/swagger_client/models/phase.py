# coding: utf-8

"""
    Mcity Control API

    Mcity implementation of OCTANE RESTful/Websocket API designed for autonomous and connected vehicle test facilities/cities.  # noqa: E501

    OpenAPI spec version: 0.0.10
    Contact: mcity-engineering@umich.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Phase(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'number': 'int',
        'bound': 'str',
        'turn': 'str',
        'stop_bar': 'PhaseStopBar'
    }

    attribute_map = {
        'number': 'number',
        'bound': 'bound',
        'turn': 'turn',
        'stop_bar': 'stopBar'
    }

    def __init__(self, number=None, bound=None, turn=None, stop_bar=None):  # noqa: E501
        """Phase - a model defined in Swagger"""  # noqa: E501
        self._number = None
        self._bound = None
        self._turn = None
        self._stop_bar = None
        self.discriminator = None
        if number is not None:
            self.number = number
        if bound is not None:
            self.bound = bound
        if turn is not None:
            self.turn = turn
        if stop_bar is not None:
            self.stop_bar = stop_bar

    @property
    def number(self):
        """Gets the number of this Phase.  # noqa: E501

        The phase number as configured on the traffic controller  # noqa: E501

        :return: The number of this Phase.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Phase.

        The phase number as configured on the traffic controller  # noqa: E501

        :param number: The number of this Phase.  # noqa: E501
        :type: int
        """

        self._number = number

    @property
    def bound(self):
        """Gets the bound of this Phase.  # noqa: E501

        The direction of traffic this phase controls. A signal with this phase would face the opposite direction.  # noqa: E501

        :return: The bound of this Phase.  # noqa: E501
        :rtype: str
        """
        return self._bound

    @bound.setter
    def bound(self, bound):
        """Sets the bound of this Phase.

        The direction of traffic this phase controls. A signal with this phase would face the opposite direction.  # noqa: E501

        :param bound: The bound of this Phase.  # noqa: E501
        :type: str
        """
        allowed_values = ["north", "south", "east", "west"]  # noqa: E501
        if bound not in allowed_values:
            raise ValueError(
                "Invalid value for `bound` ({0}), must be one of {1}"  # noqa: E501
                .format(bound, allowed_values)
            )

        self._bound = bound

    @property
    def turn(self):
        """Gets the turn of this Phase.  # noqa: E501

        Direction of movement this signal is setup to control  # noqa: E501

        :return: The turn of this Phase.  # noqa: E501
        :rtype: str
        """
        return self._turn

    @turn.setter
    def turn(self, turn):
        """Sets the turn of this Phase.

        Direction of movement this signal is setup to control  # noqa: E501

        :param turn: The turn of this Phase.  # noqa: E501
        :type: str
        """
        allowed_values = ["left", "right", "through"]  # noqa: E501
        if turn not in allowed_values:
            raise ValueError(
                "Invalid value for `turn` ({0}), must be one of {1}"  # noqa: E501
                .format(turn, allowed_values)
            )

        self._turn = turn

    @property
    def stop_bar(self):
        """Gets the stop_bar of this Phase.  # noqa: E501


        :return: The stop_bar of this Phase.  # noqa: E501
        :rtype: PhaseStopBar
        """
        return self._stop_bar

    @stop_bar.setter
    def stop_bar(self, stop_bar):
        """Sets the stop_bar of this Phase.


        :param stop_bar: The stop_bar of this Phase.  # noqa: E501
        :type: PhaseStopBar
        """

        self._stop_bar = stop_bar

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Phase, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Phase):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
