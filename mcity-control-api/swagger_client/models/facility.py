# coding: utf-8

"""
    Mcity Control API

    Mcity implementation of OCTANE RESTful/Websocket API designed for autonomous and connected vehicle test facilities/cities.  # noqa: E501

    OpenAPI spec version: 0.0.10
    Contact: mcity-engineering@umich.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Facility(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'uri': 'str',
        'name': 'str',
        'url': 'str',
        'url_map': 'str',
        'longitude': 'float',
        'latitude': 'float',
        'overlays': 'list[FacilityOverlays]',
        'contact': 'FacilityContact',
        'unit_distance': 'str',
        'unit_mass': 'str'
    }

    attribute_map = {
        'id': 'id',
        'uri': 'uri',
        'name': 'name',
        'url': 'url',
        'url_map': 'urlMap',
        'longitude': 'longitude',
        'latitude': 'latitude',
        'overlays': 'overlays',
        'contact': 'contact',
        'unit_distance': 'unitDistance',
        'unit_mass': 'unitMass'
    }

    def __init__(self, id=None, uri=None, name=None, url=None, url_map=None, longitude=None, latitude=None, overlays=None, contact=None, unit_distance=None, unit_mass=None):  # noqa: E501
        """Facility - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._uri = None
        self._name = None
        self._url = None
        self._url_map = None
        self._longitude = None
        self._latitude = None
        self._overlays = None
        self._contact = None
        self._unit_distance = None
        self._unit_mass = None
        self.discriminator = None
        self.id = id
        if uri is not None:
            self.uri = uri
        if name is not None:
            self.name = name
        if url is not None:
            self.url = url
        if url_map is not None:
            self.url_map = url_map
        if longitude is not None:
            self.longitude = longitude
        if latitude is not None:
            self.latitude = latitude
        if overlays is not None:
            self.overlays = overlays
        if contact is not None:
            self.contact = contact
        if unit_distance is not None:
            self.unit_distance = unit_distance
        if unit_mass is not None:
            self.unit_mass = unit_mass

    @property
    def id(self):
        """Gets the id of this Facility.  # noqa: E501

        An ID number identifying this Facility  # noqa: E501

        :return: The id of this Facility.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Facility.

        An ID number identifying this Facility  # noqa: E501

        :param id: The id of this Facility.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def uri(self):
        """Gets the uri of this Facility.  # noqa: E501

        The URI which can be used to access this facility directly  # noqa: E501

        :return: The uri of this Facility.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Facility.

        The URI which can be used to access this facility directly  # noqa: E501

        :param uri: The uri of this Facility.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def name(self):
        """Gets the name of this Facility.  # noqa: E501

        A text based description of this facility  # noqa: E501

        :return: The name of this Facility.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Facility.

        A text based description of this facility  # noqa: E501

        :param name: The name of this Facility.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this Facility.  # noqa: E501

        A url with more information about this facility  # noqa: E501

        :return: The url of this Facility.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Facility.

        A url with more information about this facility  # noqa: E501

        :param url: The url of this Facility.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def url_map(self):
        """Gets the url_map of this Facility.  # noqa: E501

        A url to a facility map  # noqa: E501

        :return: The url_map of this Facility.  # noqa: E501
        :rtype: str
        """
        return self._url_map

    @url_map.setter
    def url_map(self, url_map):
        """Sets the url_map of this Facility.

        A url to a facility map  # noqa: E501

        :param url_map: The url_map of this Facility.  # noqa: E501
        :type: str
        """

        self._url_map = url_map

    @property
    def longitude(self):
        """Gets the longitude of this Facility.  # noqa: E501

        The longitude of the centroid of the facility  # noqa: E501

        :return: The longitude of this Facility.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Facility.

        The longitude of the centroid of the facility  # noqa: E501

        :param longitude: The longitude of this Facility.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def latitude(self):
        """Gets the latitude of this Facility.  # noqa: E501

        The latitude of the centroid of the facility  # noqa: E501

        :return: The latitude of this Facility.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Facility.

        The latitude of the centroid of the facility  # noqa: E501

        :param latitude: The latitude of this Facility.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def overlays(self):
        """Gets the overlays of this Facility.  # noqa: E501

        Array representing all configured overlays for use in map software of the facility.  # noqa: E501

        :return: The overlays of this Facility.  # noqa: E501
        :rtype: list[FacilityOverlays]
        """
        return self._overlays

    @overlays.setter
    def overlays(self, overlays):
        """Sets the overlays of this Facility.

        Array representing all configured overlays for use in map software of the facility.  # noqa: E501

        :param overlays: The overlays of this Facility.  # noqa: E501
        :type: list[FacilityOverlays]
        """

        self._overlays = overlays

    @property
    def contact(self):
        """Gets the contact of this Facility.  # noqa: E501


        :return: The contact of this Facility.  # noqa: E501
        :rtype: FacilityContact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this Facility.


        :param contact: The contact of this Facility.  # noqa: E501
        :type: FacilityContact
        """

        self._contact = contact

    @property
    def unit_distance(self):
        """Gets the unit_distance of this Facility.  # noqa: E501

        Facility Unit for Distance  # noqa: E501

        :return: The unit_distance of this Facility.  # noqa: E501
        :rtype: str
        """
        return self._unit_distance

    @unit_distance.setter
    def unit_distance(self, unit_distance):
        """Sets the unit_distance of this Facility.

        Facility Unit for Distance  # noqa: E501

        :param unit_distance: The unit_distance of this Facility.  # noqa: E501
        :type: str
        """

        self._unit_distance = unit_distance

    @property
    def unit_mass(self):
        """Gets the unit_mass of this Facility.  # noqa: E501

        Facility Unit for Mass  # noqa: E501

        :return: The unit_mass of this Facility.  # noqa: E501
        :rtype: str
        """
        return self._unit_mass

    @unit_mass.setter
    def unit_mass(self, unit_mass):
        """Sets the unit_mass of this Facility.

        Facility Unit for Mass  # noqa: E501

        :param unit_mass: The unit_mass of this Facility.  # noqa: E501
        :type: str
        """

        self._unit_mass = unit_mass

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Facility, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Facility):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
