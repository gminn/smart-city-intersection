# coding: utf-8

"""
    Mcity Control API

    Mcity implementation of OCTANE RESTful/Websocket API designed for autonomous and connected vehicle test facilities/cities.  # noqa: E501

    OpenAPI spec version: 0.0.10
    Contact: mcity-engineering@umich.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class V2XRaw(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'message_set': 'str',
        'updated': 'datetime',
        'data': 'str'
    }

    attribute_map = {
        'id': 'id',
        'message_set': 'messageSet',
        'updated': 'updated',
        'data': 'data'
    }

    def __init__(self, id=None, message_set=None, updated=None, data=None):  # noqa: E501
        """V2XRaw - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._message_set = None
        self._updated = None
        self._data = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if message_set is not None:
            self.message_set = message_set
        if updated is not None:
            self.updated = updated
        if data is not None:
            self.data = data

    @property
    def id(self):
        """Gets the id of this V2XRaw.  # noqa: E501

        Identifier, if known of the transmitting RSU or OBU.  # noqa: E501

        :return: The id of this V2XRaw.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V2XRaw.

        Identifier, if known of the transmitting RSU or OBU.  # noqa: E501

        :param id: The id of this V2XRaw.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def message_set(self):
        """Gets the message_set of this V2XRaw.  # noqa: E501

        The format, if known, this message is broadcast in.  # noqa: E501

        :return: The message_set of this V2XRaw.  # noqa: E501
        :rtype: str
        """
        return self._message_set

    @message_set.setter
    def message_set(self, message_set):
        """Sets the message_set of this V2XRaw.

        The format, if known, this message is broadcast in.  # noqa: E501

        :param message_set: The message_set of this V2XRaw.  # noqa: E501
        :type: str
        """
        allowed_values = ["NTCIP", "J2735_200612", "J2735_200911", "J2735_201509", "J2735_201601", "J2735_201603"]  # noqa: E501
        if message_set not in allowed_values:
            raise ValueError(
                "Invalid value for `message_set` ({0}), must be one of {1}"  # noqa: E501
                .format(message_set, allowed_values)
            )

        self._message_set = message_set

    @property
    def updated(self):
        """Gets the updated of this V2XRaw.  # noqa: E501

        The date and time this message was broadcast by OCTANE.  # noqa: E501

        :return: The updated of this V2XRaw.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this V2XRaw.

        The date and time this message was broadcast by OCTANE.  # noqa: E501

        :param updated: The updated of this V2XRaw.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def data(self):
        """Gets the data of this V2XRaw.  # noqa: E501

        The raw payload of the message, HEX encoded.  # noqa: E501

        :return: The data of this V2XRaw.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this V2XRaw.

        The raw payload of the message, HEX encoded.  # noqa: E501

        :param data: The data of this V2XRaw.  # noqa: E501
        :type: str
        """

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V2XRaw, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V2XRaw):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
