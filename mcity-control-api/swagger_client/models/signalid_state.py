# coding: utf-8

"""
    Mcity Control API

    Mcity implementation of OCTANE RESTful/Websocket API designed for autonomous and connected vehicle test facilities/cities.  # noqa: E501

    OpenAPI spec version: 0.0.10
    Contact: mcity-engineering@umich.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SignalidState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reset': 'bool',
        'flash': 'bool',
        'left': 'SignalidStateLeft',
        'right': 'SignalidStateLeft',
        'straight': 'SignalidStateLeft'
    }

    attribute_map = {
        'reset': 'reset',
        'flash': 'flash',
        'left': 'left',
        'right': 'right',
        'straight': 'straight'
    }

    def __init__(self, reset=None, flash=None, left=None, right=None, straight=None):  # noqa: E501
        """SignalidState - a model defined in Swagger"""  # noqa: E501
        self._reset = None
        self._flash = None
        self._left = None
        self._right = None
        self._straight = None
        self.discriminator = None
        if reset is not None:
            self.reset = reset
        if flash is not None:
            self.flash = flash
        if left is not None:
            self.left = left
        if right is not None:
            self.right = right
        if straight is not None:
            self.straight = straight

    @property
    def reset(self):
        """Gets the reset of this SignalidState.  # noqa: E501

        Request a reset of the timing on this traffic controller. Reset is performed before other items in this request.  # noqa: E501

        :return: The reset of this SignalidState.  # noqa: E501
        :rtype: bool
        """
        return self._reset

    @reset.setter
    def reset(self, reset):
        """Sets the reset of this SignalidState.

        Request a reset of the timing on this traffic controller. Reset is performed before other items in this request.  # noqa: E501

        :param reset: The reset of this SignalidState.  # noqa: E501
        :type: bool
        """

        self._reset = reset

    @property
    def flash(self):
        """Gets the flash of this SignalidState.  # noqa: E501

        Toggles the intersection between an all way flash and a free timed mode.  # noqa: E501

        :return: The flash of this SignalidState.  # noqa: E501
        :rtype: bool
        """
        return self._flash

    @flash.setter
    def flash(self, flash):
        """Sets the flash of this SignalidState.

        Toggles the intersection between an all way flash and a free timed mode.  # noqa: E501

        :param flash: The flash of this SignalidState.  # noqa: E501
        :type: bool
        """

        self._flash = flash

    @property
    def left(self):
        """Gets the left of this SignalidState.  # noqa: E501


        :return: The left of this SignalidState.  # noqa: E501
        :rtype: SignalidStateLeft
        """
        return self._left

    @left.setter
    def left(self, left):
        """Sets the left of this SignalidState.


        :param left: The left of this SignalidState.  # noqa: E501
        :type: SignalidStateLeft
        """

        self._left = left

    @property
    def right(self):
        """Gets the right of this SignalidState.  # noqa: E501


        :return: The right of this SignalidState.  # noqa: E501
        :rtype: SignalidStateLeft
        """
        return self._right

    @right.setter
    def right(self, right):
        """Sets the right of this SignalidState.


        :param right: The right of this SignalidState.  # noqa: E501
        :type: SignalidStateLeft
        """

        self._right = right

    @property
    def straight(self):
        """Gets the straight of this SignalidState.  # noqa: E501


        :return: The straight of this SignalidState.  # noqa: E501
        :rtype: SignalidStateLeft
        """
        return self._straight

    @straight.setter
    def straight(self, straight):
        """Sets the straight of this SignalidState.


        :param straight: The straight of this SignalidState.  # noqa: E501
        :type: SignalidStateLeft
        """

        self._straight = straight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SignalidState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SignalidState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
