# coding: utf-8

"""
    Mcity Control API

    Mcity implementation of OCTANE RESTful/Websocket API designed for autonomous and connected vehicle test facilities/cities.  # noqa: E501

    OpenAPI spec version: 0.0.10
    Contact: mcity-engineering@umich.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SignalStateStraight(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'color': 'str',
        'status': 'str',
        'veh_time_min': 'float',
        'veh_time_max': 'float',
        'updated': 'datetime'
    }

    attribute_map = {
        'color': 'color',
        'status': 'status',
        'veh_time_min': 'vehTimeMin',
        'veh_time_max': 'vehTimeMax',
        'updated': 'updated'
    }

    def __init__(self, color=None, status=None, veh_time_min=None, veh_time_max=None, updated=None):  # noqa: E501
        """SignalStateStraight - a model defined in Swagger"""  # noqa: E501
        self._color = None
        self._status = None
        self._veh_time_min = None
        self._veh_time_max = None
        self._updated = None
        self.discriminator = None
        if color is not None:
            self.color = color
        if status is not None:
            self.status = status
        if veh_time_min is not None:
            self.veh_time_min = veh_time_min
        if veh_time_max is not None:
            self.veh_time_max = veh_time_max
        if updated is not None:
            self.updated = updated

    @property
    def color(self):
        """Gets the color of this SignalStateStraight.  # noqa: E501

        Color of signal if active  # noqa: E501

        :return: The color of this SignalStateStraight.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this SignalStateStraight.

        Color of signal if active  # noqa: E501

        :param color: The color of this SignalStateStraight.  # noqa: E501
        :type: str
        """
        allowed_values = ["RED", "YELLOW", "GREEN"]  # noqa: E501
        if color not in allowed_values:
            raise ValueError(
                "Invalid value for `color` ({0}), must be one of {1}"  # noqa: E501
                .format(color, allowed_values)
            )

        self._color = color

    @property
    def status(self):
        """Gets the status of this SignalStateStraight.  # noqa: E501

        Light status  # noqa: E501

        :return: The status of this SignalStateStraight.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SignalStateStraight.

        Light status  # noqa: E501

        :param status: The status of this SignalStateStraight.  # noqa: E501
        :type: str
        """
        allowed_values = ["steady", "flashing", "disabled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def veh_time_min(self):
        """Gets the veh_time_min of this SignalStateStraight.  # noqa: E501

        Minimum time (seconds) until next phase.  # noqa: E501

        :return: The veh_time_min of this SignalStateStraight.  # noqa: E501
        :rtype: float
        """
        return self._veh_time_min

    @veh_time_min.setter
    def veh_time_min(self, veh_time_min):
        """Sets the veh_time_min of this SignalStateStraight.

        Minimum time (seconds) until next phase.  # noqa: E501

        :param veh_time_min: The veh_time_min of this SignalStateStraight.  # noqa: E501
        :type: float
        """

        self._veh_time_min = veh_time_min

    @property
    def veh_time_max(self):
        """Gets the veh_time_max of this SignalStateStraight.  # noqa: E501

        Maximum time (seconds) until next phase.  # noqa: E501

        :return: The veh_time_max of this SignalStateStraight.  # noqa: E501
        :rtype: float
        """
        return self._veh_time_max

    @veh_time_max.setter
    def veh_time_max(self, veh_time_max):
        """Sets the veh_time_max of this SignalStateStraight.

        Maximum time (seconds) until next phase.  # noqa: E501

        :param veh_time_max: The veh_time_max of this SignalStateStraight.  # noqa: E501
        :type: float
        """

        self._veh_time_max = veh_time_max

    @property
    def updated(self):
        """Gets the updated of this SignalStateStraight.  # noqa: E501

        The last time the status of this signal was updated  # noqa: E501

        :return: The updated of this SignalStateStraight.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this SignalStateStraight.

        The last time the status of this signal was updated  # noqa: E501

        :param updated: The updated of this SignalStateStraight.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SignalStateStraight, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SignalStateStraight):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
