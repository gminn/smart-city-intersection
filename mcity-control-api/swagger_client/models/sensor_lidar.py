# coding: utf-8

"""
    Mcity Control API

    Mcity implementation of OCTANE RESTful/Websocket API designed for autonomous and connected vehicle test facilities/cities.  # noqa: E501

    OpenAPI spec version: 0.0.10
    Contact: mcity-engineering@umich.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SensorLIDAR(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'uri': 'str',
        'name': 'str',
        'url': 'str',
        'longitude': 'float',
        'latitude': 'float',
        'type': 'str',
        'manufacturer': 'str',
        'model': 'str',
        'revision': 'str',
        'ip_address': 'str',
        'url_web_interface': 'str',
        'range_typical': 'float',
        'accuracy_typical': 'float',
        'resolution_angular_degree': 'float',
        'resolution_distance': 'float',
        'beam_count': 'int',
        'fov_horizontal_degree': 'float',
        'fov_vertical_degree': 'float',
        'state': 'SensorState'
    }

    attribute_map = {
        'id': 'id',
        'uri': 'uri',
        'name': 'name',
        'url': 'url',
        'longitude': 'longitude',
        'latitude': 'latitude',
        'type': 'type',
        'manufacturer': 'manufacturer',
        'model': 'model',
        'revision': 'revision',
        'ip_address': 'ipAddress',
        'url_web_interface': 'urlWebInterface',
        'range_typical': 'rangeTypical',
        'accuracy_typical': 'accuracyTypical',
        'resolution_angular_degree': 'resolutionAngularDegree',
        'resolution_distance': 'resolutionDistance',
        'beam_count': 'beamCount',
        'fov_horizontal_degree': 'fovHorizontalDegree',
        'fov_vertical_degree': 'fovVerticalDegree',
        'state': 'state'
    }

    def __init__(self, id=None, uri=None, name=None, url=None, longitude=None, latitude=None, type=None, manufacturer=None, model=None, revision=None, ip_address=None, url_web_interface=None, range_typical=None, accuracy_typical=None, resolution_angular_degree=None, resolution_distance=None, beam_count=None, fov_horizontal_degree=None, fov_vertical_degree=None, state=None):  # noqa: E501
        """SensorLIDAR - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._uri = None
        self._name = None
        self._url = None
        self._longitude = None
        self._latitude = None
        self._type = None
        self._manufacturer = None
        self._model = None
        self._revision = None
        self._ip_address = None
        self._url_web_interface = None
        self._range_typical = None
        self._accuracy_typical = None
        self._resolution_angular_degree = None
        self._resolution_distance = None
        self._beam_count = None
        self._fov_horizontal_degree = None
        self._fov_vertical_degree = None
        self._state = None
        self.discriminator = None
        self.id = id
        if uri is not None:
            self.uri = uri
        if name is not None:
            self.name = name
        if url is not None:
            self.url = url
        if longitude is not None:
            self.longitude = longitude
        if latitude is not None:
            self.latitude = latitude
        if type is not None:
            self.type = type
        if manufacturer is not None:
            self.manufacturer = manufacturer
        if model is not None:
            self.model = model
        if revision is not None:
            self.revision = revision
        if ip_address is not None:
            self.ip_address = ip_address
        if url_web_interface is not None:
            self.url_web_interface = url_web_interface
        if range_typical is not None:
            self.range_typical = range_typical
        if accuracy_typical is not None:
            self.accuracy_typical = accuracy_typical
        if resolution_angular_degree is not None:
            self.resolution_angular_degree = resolution_angular_degree
        if resolution_distance is not None:
            self.resolution_distance = resolution_distance
        if beam_count is not None:
            self.beam_count = beam_count
        if fov_horizontal_degree is not None:
            self.fov_horizontal_degree = fov_horizontal_degree
        if fov_vertical_degree is not None:
            self.fov_vertical_degree = fov_vertical_degree
        if state is not None:
            self.state = state

    @property
    def id(self):
        """Gets the id of this SensorLIDAR.  # noqa: E501

        An ID number identifying this sensor  # noqa: E501

        :return: The id of this SensorLIDAR.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SensorLIDAR.

        An ID number identifying this sensor  # noqa: E501

        :param id: The id of this SensorLIDAR.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def uri(self):
        """Gets the uri of this SensorLIDAR.  # noqa: E501

        The URI which can be used to access this sensor  # noqa: E501

        :return: The uri of this SensorLIDAR.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this SensorLIDAR.

        The URI which can be used to access this sensor  # noqa: E501

        :param uri: The uri of this SensorLIDAR.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def name(self):
        """Gets the name of this SensorLIDAR.  # noqa: E501

        A text based description of the sensor  # noqa: E501

        :return: The name of this SensorLIDAR.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SensorLIDAR.

        A text based description of the sensor  # noqa: E501

        :param name: The name of this SensorLIDAR.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this SensorLIDAR.  # noqa: E501

        A url with more information about this specific sensor  # noqa: E501

        :return: The url of this SensorLIDAR.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SensorLIDAR.

        A url with more information about this specific sensor  # noqa: E501

        :param url: The url of this SensorLIDAR.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def longitude(self):
        """Gets the longitude of this SensorLIDAR.  # noqa: E501

        The longitude of the centroid of the sensor  # noqa: E501

        :return: The longitude of this SensorLIDAR.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this SensorLIDAR.

        The longitude of the centroid of the sensor  # noqa: E501

        :param longitude: The longitude of this SensorLIDAR.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def latitude(self):
        """Gets the latitude of this SensorLIDAR.  # noqa: E501

        The latitude of the centroid of the sensor  # noqa: E501

        :return: The latitude of this SensorLIDAR.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this SensorLIDAR.

        The latitude of the centroid of the sensor  # noqa: E501

        :param latitude: The latitude of this SensorLIDAR.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def type(self):
        """Gets the type of this SensorLIDAR.  # noqa: E501

        The sensor type  # noqa: E501

        :return: The type of this SensorLIDAR.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SensorLIDAR.

        The sensor type  # noqa: E501

        :param type: The type of this SensorLIDAR.  # noqa: E501
        :type: str
        """
        allowed_values = ["LIDAR"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def manufacturer(self):
        """Gets the manufacturer of this SensorLIDAR.  # noqa: E501

        The sensor manufacturer  # noqa: E501

        :return: The manufacturer of this SensorLIDAR.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this SensorLIDAR.

        The sensor manufacturer  # noqa: E501

        :param manufacturer: The manufacturer of this SensorLIDAR.  # noqa: E501
        :type: str
        """

        self._manufacturer = manufacturer

    @property
    def model(self):
        """Gets the model of this SensorLIDAR.  # noqa: E501

        The model number/name of the sensor  # noqa: E501

        :return: The model of this SensorLIDAR.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this SensorLIDAR.

        The model number/name of the sensor  # noqa: E501

        :param model: The model of this SensorLIDAR.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def revision(self):
        """Gets the revision of this SensorLIDAR.  # noqa: E501

        Sensor revision number/edition information  # noqa: E501

        :return: The revision of this SensorLIDAR.  # noqa: E501
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this SensorLIDAR.

        Sensor revision number/edition information  # noqa: E501

        :param revision: The revision of this SensorLIDAR.  # noqa: E501
        :type: str
        """

        self._revision = revision

    @property
    def ip_address(self):
        """Gets the ip_address of this SensorLIDAR.  # noqa: E501

        The IP Address of the sensor  # noqa: E501

        :return: The ip_address of this SensorLIDAR.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this SensorLIDAR.

        The IP Address of the sensor  # noqa: E501

        :param ip_address: The ip_address of this SensorLIDAR.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def url_web_interface(self):
        """Gets the url_web_interface of this SensorLIDAR.  # noqa: E501

        A URL allowing control or management of the sensor  # noqa: E501

        :return: The url_web_interface of this SensorLIDAR.  # noqa: E501
        :rtype: str
        """
        return self._url_web_interface

    @url_web_interface.setter
    def url_web_interface(self, url_web_interface):
        """Sets the url_web_interface of this SensorLIDAR.

        A URL allowing control or management of the sensor  # noqa: E501

        :param url_web_interface: The url_web_interface of this SensorLIDAR.  # noqa: E501
        :type: str
        """

        self._url_web_interface = url_web_interface

    @property
    def range_typical(self):
        """Gets the range_typical of this SensorLIDAR.  # noqa: E501

        The typical range of the sensor.  # noqa: E501

        :return: The range_typical of this SensorLIDAR.  # noqa: E501
        :rtype: float
        """
        return self._range_typical

    @range_typical.setter
    def range_typical(self, range_typical):
        """Sets the range_typical of this SensorLIDAR.

        The typical range of the sensor.  # noqa: E501

        :param range_typical: The range_typical of this SensorLIDAR.  # noqa: E501
        :type: float
        """

        self._range_typical = range_typical

    @property
    def accuracy_typical(self):
        """Gets the accuracy_typical of this SensorLIDAR.  # noqa: E501

        The typical accuracy of the sensor.  # noqa: E501

        :return: The accuracy_typical of this SensorLIDAR.  # noqa: E501
        :rtype: float
        """
        return self._accuracy_typical

    @accuracy_typical.setter
    def accuracy_typical(self, accuracy_typical):
        """Sets the accuracy_typical of this SensorLIDAR.

        The typical accuracy of the sensor.  # noqa: E501

        :param accuracy_typical: The accuracy_typical of this SensorLIDAR.  # noqa: E501
        :type: float
        """

        self._accuracy_typical = accuracy_typical

    @property
    def resolution_angular_degree(self):
        """Gets the resolution_angular_degree of this SensorLIDAR.  # noqa: E501

        The max angular resolution of this LIDAR.  # noqa: E501

        :return: The resolution_angular_degree of this SensorLIDAR.  # noqa: E501
        :rtype: float
        """
        return self._resolution_angular_degree

    @resolution_angular_degree.setter
    def resolution_angular_degree(self, resolution_angular_degree):
        """Sets the resolution_angular_degree of this SensorLIDAR.

        The max angular resolution of this LIDAR.  # noqa: E501

        :param resolution_angular_degree: The resolution_angular_degree of this SensorLIDAR.  # noqa: E501
        :type: float
        """

        self._resolution_angular_degree = resolution_angular_degree

    @property
    def resolution_distance(self):
        """Gets the resolution_distance of this SensorLIDAR.  # noqa: E501

        The resolution at max distance of this LIDAR.  # noqa: E501

        :return: The resolution_distance of this SensorLIDAR.  # noqa: E501
        :rtype: float
        """
        return self._resolution_distance

    @resolution_distance.setter
    def resolution_distance(self, resolution_distance):
        """Sets the resolution_distance of this SensorLIDAR.

        The resolution at max distance of this LIDAR.  # noqa: E501

        :param resolution_distance: The resolution_distance of this SensorLIDAR.  # noqa: E501
        :type: float
        """

        self._resolution_distance = resolution_distance

    @property
    def beam_count(self):
        """Gets the beam_count of this SensorLIDAR.  # noqa: E501

        The number of beams this LIDAR uses for sensing.  # noqa: E501

        :return: The beam_count of this SensorLIDAR.  # noqa: E501
        :rtype: int
        """
        return self._beam_count

    @beam_count.setter
    def beam_count(self, beam_count):
        """Sets the beam_count of this SensorLIDAR.

        The number of beams this LIDAR uses for sensing.  # noqa: E501

        :param beam_count: The beam_count of this SensorLIDAR.  # noqa: E501
        :type: int
        """

        self._beam_count = beam_count

    @property
    def fov_horizontal_degree(self):
        """Gets the fov_horizontal_degree of this SensorLIDAR.  # noqa: E501

        The horizontal FOV of this sensor.  # noqa: E501

        :return: The fov_horizontal_degree of this SensorLIDAR.  # noqa: E501
        :rtype: float
        """
        return self._fov_horizontal_degree

    @fov_horizontal_degree.setter
    def fov_horizontal_degree(self, fov_horizontal_degree):
        """Sets the fov_horizontal_degree of this SensorLIDAR.

        The horizontal FOV of this sensor.  # noqa: E501

        :param fov_horizontal_degree: The fov_horizontal_degree of this SensorLIDAR.  # noqa: E501
        :type: float
        """

        self._fov_horizontal_degree = fov_horizontal_degree

    @property
    def fov_vertical_degree(self):
        """Gets the fov_vertical_degree of this SensorLIDAR.  # noqa: E501

        The vertical FOV of this sensor.  # noqa: E501

        :return: The fov_vertical_degree of this SensorLIDAR.  # noqa: E501
        :rtype: float
        """
        return self._fov_vertical_degree

    @fov_vertical_degree.setter
    def fov_vertical_degree(self, fov_vertical_degree):
        """Sets the fov_vertical_degree of this SensorLIDAR.

        The vertical FOV of this sensor.  # noqa: E501

        :param fov_vertical_degree: The fov_vertical_degree of this SensorLIDAR.  # noqa: E501
        :type: float
        """

        self._fov_vertical_degree = fov_vertical_degree

    @property
    def state(self):
        """Gets the state of this SensorLIDAR.  # noqa: E501


        :return: The state of this SensorLIDAR.  # noqa: E501
        :rtype: SensorState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SensorLIDAR.


        :param state: The state of this SensorLIDAR.  # noqa: E501
        :type: SensorState
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SensorLIDAR, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SensorLIDAR):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
