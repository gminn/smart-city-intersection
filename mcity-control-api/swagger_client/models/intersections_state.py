# coding: utf-8

"""
    Mcity Control API

    Mcity implementation of OCTANE RESTful/Websocket API designed for autonomous and connected vehicle test facilities/cities.  # noqa: E501

    OpenAPI spec version: 0.0.10
    Contact: mcity-engineering@umich.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class IntersectionsState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reset': 'bool',
        'enabled': 'bool',
        'flash': 'bool',
        'time_paused': 'bool',
        'time_clear_control': 'int'
    }

    attribute_map = {
        'reset': 'reset',
        'enabled': 'enabled',
        'flash': 'flash',
        'time_paused': 'timePaused',
        'time_clear_control': 'timeClearControl'
    }

    def __init__(self, reset=None, enabled=None, flash=None, time_paused=None, time_clear_control=None):  # noqa: E501
        """IntersectionsState - a model defined in Swagger"""  # noqa: E501
        self._reset = None
        self._enabled = None
        self._flash = None
        self._time_paused = None
        self._time_clear_control = None
        self.discriminator = None
        if reset is not None:
            self.reset = reset
        if enabled is not None:
            self.enabled = enabled
        if flash is not None:
            self.flash = flash
        if time_paused is not None:
            self.time_paused = time_paused
        if time_clear_control is not None:
            self.time_clear_control = time_clear_control

    @property
    def reset(self):
        """Gets the reset of this IntersectionsState.  # noqa: E501

        Request a reset of the timing on all traffic controllers. Reset is performed before other items in this request.  # noqa: E501

        :return: The reset of this IntersectionsState.  # noqa: E501
        :rtype: bool
        """
        return self._reset

    @reset.setter
    def reset(self, reset):
        """Sets the reset of this IntersectionsState.

        Request a reset of the timing on all traffic controllers. Reset is performed before other items in this request.  # noqa: E501

        :param reset: The reset of this IntersectionsState.  # noqa: E501
        :type: bool
        """

        self._reset = reset

    @property
    def enabled(self):
        """Gets the enabled of this IntersectionsState.  # noqa: E501

        Request the signal heads for this intersection be switched on or off. This does not shut off the controller.  # noqa: E501

        :return: The enabled of this IntersectionsState.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this IntersectionsState.

        Request the signal heads for this intersection be switched on or off. This does not shut off the controller.  # noqa: E501

        :param enabled: The enabled of this IntersectionsState.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def flash(self):
        """Gets the flash of this IntersectionsState.  # noqa: E501

        Toggles the intersections between all way flash and a free timed mode.  # noqa: E501

        :return: The flash of this IntersectionsState.  # noqa: E501
        :rtype: bool
        """
        return self._flash

    @flash.setter
    def flash(self, flash):
        """Sets the flash of this IntersectionsState.

        Toggles the intersections between all way flash and a free timed mode.  # noqa: E501

        :param flash: The flash of this IntersectionsState.  # noqa: E501
        :type: bool
        """

        self._flash = flash

    @property
    def time_paused(self):
        """Gets the time_paused of this IntersectionsState.  # noqa: E501

        Pause or un-pause ring time of this intersection. Causes all lights to freeze in current state when set True.  # noqa: E501

        :return: The time_paused of this IntersectionsState.  # noqa: E501
        :rtype: bool
        """
        return self._time_paused

    @time_paused.setter
    def time_paused(self, time_paused):
        """Sets the time_paused of this IntersectionsState.

        Pause or un-pause ring time of this intersection. Causes all lights to freeze in current state when set True.  # noqa: E501

        :param time_paused: The time_paused of this IntersectionsState.  # noqa: E501
        :type: bool
        """

        self._time_paused = time_paused

    @property
    def time_clear_control(self):
        """Gets the time_clear_control of this IntersectionsState.  # noqa: E501

        Default is 0 - disabled. > 0 setting causes control commands to be automatically cleared this input number of seconds.  # noqa: E501

        :return: The time_clear_control of this IntersectionsState.  # noqa: E501
        :rtype: int
        """
        return self._time_clear_control

    @time_clear_control.setter
    def time_clear_control(self, time_clear_control):
        """Sets the time_clear_control of this IntersectionsState.

        Default is 0 - disabled. > 0 setting causes control commands to be automatically cleared this input number of seconds.  # noqa: E501

        :param time_clear_control: The time_clear_control of this IntersectionsState.  # noqa: E501
        :type: int
        """

        self._time_clear_control = time_clear_control

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IntersectionsState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntersectionsState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
