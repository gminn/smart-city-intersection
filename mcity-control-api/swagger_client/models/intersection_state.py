# coding: utf-8

"""
    Mcity Control API

    Mcity implementation of OCTANE RESTful/Websocket API designed for autonomous and connected vehicle test facilities/cities.  # noqa: E501

    OpenAPI spec version: 0.0.10
    Contact: mcity-engineering@umich.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class IntersectionState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'updated': 'datetime',
        'enabled': 'bool',
        'time_paused': 'bool',
        'time_clear_control': 'int',
        'flash': 'bool',
        'call_vehicle': 'str',
        'call_pedestrian': 'str',
        'omit': 'str',
        'hold': 'str',
        'force_off': 'str',
        'pedestrian_clear': 'str',
        'walk_dont': 'str',
        'walk': 'str',
        'phases': 'list[IntersectionStatePhases]'
    }

    attribute_map = {
        'updated': 'updated',
        'enabled': 'enabled',
        'time_paused': 'timePaused',
        'time_clear_control': 'timeClearControl',
        'flash': 'flash',
        'call_vehicle': 'callVehicle',
        'call_pedestrian': 'callPedestrian',
        'omit': 'omit',
        'hold': 'hold',
        'force_off': 'forceOff',
        'pedestrian_clear': 'pedestrianClear',
        'walk_dont': 'walkDont',
        'walk': 'walk',
        'phases': 'phases'
    }

    def __init__(self, updated=None, enabled=None, time_paused=None, time_clear_control=None, flash=None, call_vehicle=None, call_pedestrian=None, omit=None, hold=None, force_off=None, pedestrian_clear=None, walk_dont=None, walk=None, phases=None):  # noqa: E501
        """IntersectionState - a model defined in Swagger"""  # noqa: E501
        self._updated = None
        self._enabled = None
        self._time_paused = None
        self._time_clear_control = None
        self._flash = None
        self._call_vehicle = None
        self._call_pedestrian = None
        self._omit = None
        self._hold = None
        self._force_off = None
        self._pedestrian_clear = None
        self._walk_dont = None
        self._walk = None
        self._phases = None
        self.discriminator = None
        if updated is not None:
            self.updated = updated
        if enabled is not None:
            self.enabled = enabled
        if time_paused is not None:
            self.time_paused = time_paused
        if time_clear_control is not None:
            self.time_clear_control = time_clear_control
        if flash is not None:
            self.flash = flash
        if call_vehicle is not None:
            self.call_vehicle = call_vehicle
        if call_pedestrian is not None:
            self.call_pedestrian = call_pedestrian
        if omit is not None:
            self.omit = omit
        if hold is not None:
            self.hold = hold
        if force_off is not None:
            self.force_off = force_off
        if pedestrian_clear is not None:
            self.pedestrian_clear = pedestrian_clear
        if walk_dont is not None:
            self.walk_dont = walk_dont
        if walk is not None:
            self.walk = walk
        if phases is not None:
            self.phases = phases

    @property
    def updated(self):
        """Gets the updated of this IntersectionState.  # noqa: E501

        The last time the status of this Intersection was updated  # noqa: E501

        :return: The updated of this IntersectionState.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this IntersectionState.

        The last time the status of this Intersection was updated  # noqa: E501

        :param updated: The updated of this IntersectionState.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def enabled(self):
        """Gets the enabled of this IntersectionState.  # noqa: E501

        True / False representing lit state of signal heads in intersection.  # noqa: E501

        :return: The enabled of this IntersectionState.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this IntersectionState.

        True / False representing lit state of signal heads in intersection.  # noqa: E501

        :param enabled: The enabled of this IntersectionState.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def time_paused(self):
        """Gets the time_paused of this IntersectionState.  # noqa: E501

        Is the countdown timer between phase changes for this intersection paused?  # noqa: E501

        :return: The time_paused of this IntersectionState.  # noqa: E501
        :rtype: bool
        """
        return self._time_paused

    @time_paused.setter
    def time_paused(self, time_paused):
        """Sets the time_paused of this IntersectionState.

        Is the countdown timer between phase changes for this intersection paused?  # noqa: E501

        :param time_paused: The time_paused of this IntersectionState.  # noqa: E501
        :type: bool
        """

        self._time_paused = time_paused

    @property
    def time_clear_control(self):
        """Gets the time_clear_control of this IntersectionState.  # noqa: E501

        Time in seconds between a control requests and when the traffic controller automatically clears that request. NTCIP 1202 Backup time. Setting to 0 disables automatic clearing of controls requests at this intersection.  # noqa: E501

        :return: The time_clear_control of this IntersectionState.  # noqa: E501
        :rtype: int
        """
        return self._time_clear_control

    @time_clear_control.setter
    def time_clear_control(self, time_clear_control):
        """Sets the time_clear_control of this IntersectionState.

        Time in seconds between a control requests and when the traffic controller automatically clears that request. NTCIP 1202 Backup time. Setting to 0 disables automatic clearing of controls requests at this intersection.  # noqa: E501

        :param time_clear_control: The time_clear_control of this IntersectionState.  # noqa: E501
        :type: int
        """

        self._time_clear_control = time_clear_control

    @property
    def flash(self):
        """Gets the flash of this IntersectionState.  # noqa: E501

        Boolean value representing if the intersection is in flash (night flash) mode.  # noqa: E501

        :return: The flash of this IntersectionState.  # noqa: E501
        :rtype: bool
        """
        return self._flash

    @flash.setter
    def flash(self, flash):
        """Sets the flash of this IntersectionState.

        Boolean value representing if the intersection is in flash (night flash) mode.  # noqa: E501

        :param flash: The flash of this IntersectionState.  # noqa: E501
        :type: bool
        """

        self._flash = flash

    @property
    def call_vehicle(self):
        """Gets the call_vehicle of this IntersectionState.  # noqa: E501

        Active Vehicles calls placed on each phase. A bit string representing a true or false value for each of the 8 phases in descending order Ex. 00100001 (Phase 1+6)  # noqa: E501

        :return: The call_vehicle of this IntersectionState.  # noqa: E501
        :rtype: str
        """
        return self._call_vehicle

    @call_vehicle.setter
    def call_vehicle(self, call_vehicle):
        """Sets the call_vehicle of this IntersectionState.

        Active Vehicles calls placed on each phase. A bit string representing a true or false value for each of the 8 phases in descending order Ex. 00100001 (Phase 1+6)  # noqa: E501

        :param call_vehicle: The call_vehicle of this IntersectionState.  # noqa: E501
        :type: str
        """

        self._call_vehicle = call_vehicle

    @property
    def call_pedestrian(self):
        """Gets the call_pedestrian of this IntersectionState.  # noqa: E501

        Active Pedestrian calls placed on each phase. A bit string representing a true or false value for each of the 8 phases in descending order Ex. 00100001 (Phase 1+6)  # noqa: E501

        :return: The call_pedestrian of this IntersectionState.  # noqa: E501
        :rtype: str
        """
        return self._call_pedestrian

    @call_pedestrian.setter
    def call_pedestrian(self, call_pedestrian):
        """Sets the call_pedestrian of this IntersectionState.

        Active Pedestrian calls placed on each phase. A bit string representing a true or false value for each of the 8 phases in descending order Ex. 00100001 (Phase 1+6)  # noqa: E501

        :param call_pedestrian: The call_pedestrian of this IntersectionState.  # noqa: E501
        :type: str
        """

        self._call_pedestrian = call_pedestrian

    @property
    def omit(self):
        """Gets the omit of this IntersectionState.  # noqa: E501

        Active Phase omits. A bit string representing a true or false value for each of the 8 phases in descending order Ex. 00100001 (Phase 1+6)  # noqa: E501

        :return: The omit of this IntersectionState.  # noqa: E501
        :rtype: str
        """
        return self._omit

    @omit.setter
    def omit(self, omit):
        """Sets the omit of this IntersectionState.

        Active Phase omits. A bit string representing a true or false value for each of the 8 phases in descending order Ex. 00100001 (Phase 1+6)  # noqa: E501

        :param omit: The omit of this IntersectionState.  # noqa: E501
        :type: str
        """

        self._omit = omit

    @property
    def hold(self):
        """Gets the hold of this IntersectionState.  # noqa: E501

        Active Green holds by Phase. A bit string representing a true or false value for each of the 8 phases in descending order Ex. 00100001 (Phase 1+6)  # noqa: E501

        :return: The hold of this IntersectionState.  # noqa: E501
        :rtype: str
        """
        return self._hold

    @hold.setter
    def hold(self, hold):
        """Sets the hold of this IntersectionState.

        Active Green holds by Phase. A bit string representing a true or false value for each of the 8 phases in descending order Ex. 00100001 (Phase 1+6)  # noqa: E501

        :param hold: The hold of this IntersectionState.  # noqa: E501
        :type: str
        """

        self._hold = hold

    @property
    def force_off(self):
        """Gets the force_off of this IntersectionState.  # noqa: E501

        Active force off to red requests by Phase. A bit string representing a true or false value for each of the 8 phases in descending order Ex. 00100001 (Phase 1+6)  # noqa: E501

        :return: The force_off of this IntersectionState.  # noqa: E501
        :rtype: str
        """
        return self._force_off

    @force_off.setter
    def force_off(self, force_off):
        """Sets the force_off of this IntersectionState.

        Active force off to red requests by Phase. A bit string representing a true or false value for each of the 8 phases in descending order Ex. 00100001 (Phase 1+6)  # noqa: E501

        :param force_off: The force_off of this IntersectionState.  # noqa: E501
        :type: str
        """

        self._force_off = force_off

    @property
    def pedestrian_clear(self):
        """Gets the pedestrian_clear of this IntersectionState.  # noqa: E501

        Pedestrian clear state active/inactive by phase. A bit string representing a true or false value for each of the 8 phases in descending order Ex. 00100001 (Phase 1+6)  # noqa: E501

        :return: The pedestrian_clear of this IntersectionState.  # noqa: E501
        :rtype: str
        """
        return self._pedestrian_clear

    @pedestrian_clear.setter
    def pedestrian_clear(self, pedestrian_clear):
        """Sets the pedestrian_clear of this IntersectionState.

        Pedestrian clear state active/inactive by phase. A bit string representing a true or false value for each of the 8 phases in descending order Ex. 00100001 (Phase 1+6)  # noqa: E501

        :param pedestrian_clear: The pedestrian_clear of this IntersectionState.  # noqa: E501
        :type: str
        """

        self._pedestrian_clear = pedestrian_clear

    @property
    def walk_dont(self):
        """Gets the walk_dont of this IntersectionState.  # noqa: E501

        Don't walk activity by phase. A bit string representing a true or false value for each of the 8 phases in descending order Ex. 00100001 (Phase 1+6)  # noqa: E501

        :return: The walk_dont of this IntersectionState.  # noqa: E501
        :rtype: str
        """
        return self._walk_dont

    @walk_dont.setter
    def walk_dont(self, walk_dont):
        """Sets the walk_dont of this IntersectionState.

        Don't walk activity by phase. A bit string representing a true or false value for each of the 8 phases in descending order Ex. 00100001 (Phase 1+6)  # noqa: E501

        :param walk_dont: The walk_dont of this IntersectionState.  # noqa: E501
        :type: str
        """

        self._walk_dont = walk_dont

    @property
    def walk(self):
        """Gets the walk of this IntersectionState.  # noqa: E501

        Walk activity by phase. A bit string representing a true or false value for each of the 8 phases in descending order Ex. 00100001 (Phase 1+6)  # noqa: E501

        :return: The walk of this IntersectionState.  # noqa: E501
        :rtype: str
        """
        return self._walk

    @walk.setter
    def walk(self, walk):
        """Sets the walk of this IntersectionState.

        Walk activity by phase. A bit string representing a true or false value for each of the 8 phases in descending order Ex. 00100001 (Phase 1+6)  # noqa: E501

        :param walk: The walk of this IntersectionState.  # noqa: E501
        :type: str
        """

        self._walk = walk

    @property
    def phases(self):
        """Gets the phases of this IntersectionState.  # noqa: E501

        Status for each phase at time of last update  # noqa: E501

        :return: The phases of this IntersectionState.  # noqa: E501
        :rtype: list[IntersectionStatePhases]
        """
        return self._phases

    @phases.setter
    def phases(self, phases):
        """Sets the phases of this IntersectionState.

        Status for each phase at time of last update  # noqa: E501

        :param phases: The phases of this IntersectionState.  # noqa: E501
        :type: list[IntersectionStatePhases]
        """

        self._phases = phases

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IntersectionState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntersectionState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
