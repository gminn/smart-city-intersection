# coding: utf-8

"""
    Mcity Control API

    Mcity implementation of OCTANE RESTful/Websocket API designed for autonomous and connected vehicle test facilities/cities.  # noqa: E501

    OpenAPI spec version: 0.0.10
    Contact: mcity-engineering@umich.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ArrowBoard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'unit_id': 'str',
        'name': 'str',
        'uri': 'str',
        'url': 'str',
        'state': 'SignBoardState'
    }

    attribute_map = {
        'id': 'id',
        'unit_id': 'unitID',
        'name': 'name',
        'uri': 'uri',
        'url': 'url',
        'state': 'state'
    }

    def __init__(self, id=None, unit_id=None, name=None, uri=None, url=None, state=None):  # noqa: E501
        """ArrowBoard - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._unit_id = None
        self._name = None
        self._uri = None
        self._url = None
        self._state = None
        self.discriminator = None
        self.id = id
        self.unit_id = unit_id
        if name is not None:
            self.name = name
        if uri is not None:
            self.uri = uri
        if url is not None:
            self.url = url
        if state is not None:
            self.state = state

    @property
    def id(self):
        """Gets the id of this ArrowBoard.  # noqa: E501

        An ID number identifying this sign board  # noqa: E501

        :return: The id of this ArrowBoard.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ArrowBoard.

        An ID number identifying this sign board  # noqa: E501

        :param id: The id of this ArrowBoard.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def unit_id(self):
        """Gets the unit_id of this ArrowBoard.  # noqa: E501

        The unit ID that the sign board responds with.  This is the manufacturers identification number.  # noqa: E501

        :return: The unit_id of this ArrowBoard.  # noqa: E501
        :rtype: str
        """
        return self._unit_id

    @unit_id.setter
    def unit_id(self, unit_id):
        """Sets the unit_id of this ArrowBoard.

        The unit ID that the sign board responds with.  This is the manufacturers identification number.  # noqa: E501

        :param unit_id: The unit_id of this ArrowBoard.  # noqa: E501
        :type: str
        """
        if unit_id is None:
            raise ValueError("Invalid value for `unit_id`, must not be `None`")  # noqa: E501

        self._unit_id = unit_id

    @property
    def name(self):
        """Gets the name of this ArrowBoard.  # noqa: E501

        A text based description of this arrow board  # noqa: E501

        :return: The name of this ArrowBoard.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ArrowBoard.

        A text based description of this arrow board  # noqa: E501

        :param name: The name of this ArrowBoard.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def uri(self):
        """Gets the uri of this ArrowBoard.  # noqa: E501

        The URI which can be used to communicate with the arrow board  # noqa: E501

        :return: The uri of this ArrowBoard.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ArrowBoard.

        The URI which can be used to communicate with the arrow board  # noqa: E501

        :param uri: The uri of this ArrowBoard.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def url(self):
        """Gets the url of this ArrowBoard.  # noqa: E501

        A url with more information about this arrow board  # noqa: E501

        :return: The url of this ArrowBoard.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ArrowBoard.

        A url with more information about this arrow board  # noqa: E501

        :param url: The url of this ArrowBoard.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def state(self):
        """Gets the state of this ArrowBoard.  # noqa: E501


        :return: The state of this ArrowBoard.  # noqa: E501
        :rtype: SignBoardState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ArrowBoard.


        :param state: The state of this ArrowBoard.  # noqa: E501
        :type: SignBoardState
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ArrowBoard, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArrowBoard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
